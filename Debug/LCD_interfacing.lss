
LCD_interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  000029b8  00002a2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001e18  00000000  00000000  00002a5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bb5  00000000  00000000  00004874  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005429  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005569  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000056d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007322  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000820d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008fbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000911c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000093a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009b77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 eb       	ldi	r30, 0xB8	; 184
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 05 	call	0xb36	; 0xb36 <main>
      7a:	0c 94 da 14 	jmp	0x29b4	; 0x29b4 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 5e 14 	jmp	0x28bc	; 0x28bc <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a5 e8       	ldi	r26, 0x85	; 133
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 7a 14 	jmp	0x28f4	; 0x28f4 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 6a 14 	jmp	0x28d4	; 0x28d4 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 86 14 	jmp	0x290c	; 0x290c <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 6a 14 	jmp	0x28d4	; 0x28d4 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 86 14 	jmp	0x290c	; 0x290c <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 5e 14 	jmp	0x28bc	; 0x28bc <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	85 e8       	ldi	r24, 0x85	; 133
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 7a 14 	jmp	0x28f4	; 0x28f4 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 6a 14 	jmp	0x28d4	; 0x28d4 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 86 14 	jmp	0x290c	; 0x290c <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 6a 14 	jmp	0x28d4	; 0x28d4 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 86 14 	jmp	0x290c	; 0x290c <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 6a 14 	jmp	0x28d4	; 0x28d4 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 86 14 	jmp	0x290c	; 0x290c <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 6e 14 	jmp	0x28dc	; 0x28dc <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 8a 14 	jmp	0x2914	; 0x2914 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <main>:
#include "LCD.h"



int main(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	2e 97       	sbiw	r28, 0x0e	; 14
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
	LCD_init(); /* initialize LCD */
     b4a:	0e 94 28 11 	call	0x2250	; 0x2250 <LCD_init>
	LCD_display_String_Row_Column(0,2,"My LCD Driver");
     b4e:	20 e6       	ldi	r18, 0x60	; 96
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	62 e0       	ldi	r22, 0x02	; 2
     b56:	a9 01       	movw	r20, r18
     b58:	0e 94 18 14 	call	0x2830	; 0x2830 <LCD_display_String_Row_Column>
	LCD_display_String_Row_Column(1,3,"Embedded SW");
     b5c:	2e e6       	ldi	r18, 0x6E	; 110
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	63 e0       	ldi	r22, 0x03	; 3
     b64:	a9 01       	movw	r20, r18
     b66:	0e 94 18 14 	call	0x2830	; 0x2830 <LCD_display_String_Row_Column>
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	aa e7       	ldi	r26, 0x7A	; 122
     b70:	b5 e4       	ldi	r27, 0x45	; 69
     b72:	8b 87       	std	Y+11, r24	; 0x0b
     b74:	9c 87       	std	Y+12, r25	; 0x0c
     b76:	ad 87       	std	Y+13, r26	; 0x0d
     b78:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b7a:	6b 85       	ldd	r22, Y+11	; 0x0b
     b7c:	7c 85       	ldd	r23, Y+12	; 0x0c
     b7e:	8d 85       	ldd	r24, Y+13	; 0x0d
     b80:	9e 85       	ldd	r25, Y+14	; 0x0e
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	4a e7       	ldi	r20, 0x7A	; 122
     b88:	53 e4       	ldi	r21, 0x43	; 67
     b8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     b8e:	dc 01       	movw	r26, r24
     b90:	cb 01       	movw	r24, r22
     b92:	8f 83       	std	Y+7, r24	; 0x07
     b94:	98 87       	std	Y+8, r25	; 0x08
     b96:	a9 87       	std	Y+9, r26	; 0x09
     b98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b9a:	6f 81       	ldd	r22, Y+7	; 0x07
     b9c:	78 85       	ldd	r23, Y+8	; 0x08
     b9e:	89 85       	ldd	r24, Y+9	; 0x09
     ba0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	40 e8       	ldi	r20, 0x80	; 128
     ba8:	5f e3       	ldi	r21, 0x3F	; 63
     baa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     bae:	88 23       	and	r24, r24
     bb0:	2c f4       	brge	.+10     	; 0xbbc <main+0x86>
		__ticks = 1;
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	9e 83       	std	Y+6, r25	; 0x06
     bb8:	8d 83       	std	Y+5, r24	; 0x05
     bba:	3f c0       	rjmp	.+126    	; 0xc3a <main+0x104>
	else if (__tmp > 65535)
     bbc:	6f 81       	ldd	r22, Y+7	; 0x07
     bbe:	78 85       	ldd	r23, Y+8	; 0x08
     bc0:	89 85       	ldd	r24, Y+9	; 0x09
     bc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	3f ef       	ldi	r19, 0xFF	; 255
     bc8:	4f e7       	ldi	r20, 0x7F	; 127
     bca:	57 e4       	ldi	r21, 0x47	; 71
     bcc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     bd0:	18 16       	cp	r1, r24
     bd2:	4c f5       	brge	.+82     	; 0xc26 <main+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bd4:	6b 85       	ldd	r22, Y+11	; 0x0b
     bd6:	7c 85       	ldd	r23, Y+12	; 0x0c
     bd8:	8d 85       	ldd	r24, Y+13	; 0x0d
     bda:	9e 85       	ldd	r25, Y+14	; 0x0e
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	40 e2       	ldi	r20, 0x20	; 32
     be2:	51 e4       	ldi	r21, 0x41	; 65
     be4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     be8:	dc 01       	movw	r26, r24
     bea:	cb 01       	movw	r24, r22
     bec:	bc 01       	movw	r22, r24
     bee:	cd 01       	movw	r24, r26
     bf0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     bf4:	dc 01       	movw	r26, r24
     bf6:	cb 01       	movw	r24, r22
     bf8:	9e 83       	std	Y+6, r25	; 0x06
     bfa:	8d 83       	std	Y+5, r24	; 0x05
     bfc:	0f c0       	rjmp	.+30     	; 0xc1c <main+0xe6>
     bfe:	89 e1       	ldi	r24, 0x19	; 25
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	9c 83       	std	Y+4, r25	; 0x04
     c04:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	9c 81       	ldd	r25, Y+4	; 0x04
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	f1 f7       	brne	.-4      	; 0xc0a <main+0xd4>
     c0e:	9c 83       	std	Y+4, r25	; 0x04
     c10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c12:	8d 81       	ldd	r24, Y+5	; 0x05
     c14:	9e 81       	ldd	r25, Y+6	; 0x06
     c16:	01 97       	sbiw	r24, 0x01	; 1
     c18:	9e 83       	std	Y+6, r25	; 0x06
     c1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c1c:	8d 81       	ldd	r24, Y+5	; 0x05
     c1e:	9e 81       	ldd	r25, Y+6	; 0x06
     c20:	00 97       	sbiw	r24, 0x00	; 0
     c22:	69 f7       	brne	.-38     	; 0xbfe <main+0xc8>
     c24:	14 c0       	rjmp	.+40     	; 0xc4e <main+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c26:	6f 81       	ldd	r22, Y+7	; 0x07
     c28:	78 85       	ldd	r23, Y+8	; 0x08
     c2a:	89 85       	ldd	r24, Y+9	; 0x09
     c2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c2e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c32:	dc 01       	movw	r26, r24
     c34:	cb 01       	movw	r24, r22
     c36:	9e 83       	std	Y+6, r25	; 0x06
     c38:	8d 83       	std	Y+5, r24	; 0x05
     c3a:	8d 81       	ldd	r24, Y+5	; 0x05
     c3c:	9e 81       	ldd	r25, Y+6	; 0x06
     c3e:	9a 83       	std	Y+2, r25	; 0x02
     c40:	89 83       	std	Y+1, r24	; 0x01
     c42:	89 81       	ldd	r24, Y+1	; 0x01
     c44:	9a 81       	ldd	r25, Y+2	; 0x02
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	f1 f7       	brne	.-4      	; 0xc46 <main+0x110>
     c4a:	9a 83       	std	Y+2, r25	; 0x02
     c4c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(4000); /* wait four seconds */

	LCD_Clear(); /* clear the LCD display */
     c4e:	0e 94 31 14 	call	0x2862	; 0x2862 <LCD_Clear>
	LCD_displayString("Ziad Ahmed");
     c52:	8a e7       	ldi	r24, 0x7A	; 122
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	0e 94 c5 13 	call	0x278a	; 0x278a <LCD_displayString>
     c5a:	ff cf       	rjmp	.-2      	; 0xc5a <main+0x124>

00000c5c <DIO_setPINDir>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void DIO_setPINDir(uint8 portname,uint8 pin,uint8 direction)
{
     c5c:	df 93       	push	r29
     c5e:	cf 93       	push	r28
     c60:	00 d0       	rcall	.+0      	; 0xc62 <DIO_setPINDir+0x6>
     c62:	00 d0       	rcall	.+0      	; 0xc64 <DIO_setPINDir+0x8>
     c64:	0f 92       	push	r0
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
     c6a:	89 83       	std	Y+1, r24	; 0x01
     c6c:	6a 83       	std	Y+2, r22	; 0x02
     c6e:	4b 83       	std	Y+3, r20	; 0x03

	switch(portname)
     c70:	89 81       	ldd	r24, Y+1	; 0x01
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	3d 83       	std	Y+5, r19	; 0x05
     c78:	2c 83       	std	Y+4, r18	; 0x04
     c7a:	8c 81       	ldd	r24, Y+4	; 0x04
     c7c:	9d 81       	ldd	r25, Y+5	; 0x05
     c7e:	82 34       	cpi	r24, 0x42	; 66
     c80:	91 05       	cpc	r25, r1
     c82:	09 f4       	brne	.+2      	; 0xc86 <DIO_setPINDir+0x2a>
     c84:	44 c0       	rjmp	.+136    	; 0xd0e <DIO_setPINDir+0xb2>
     c86:	2c 81       	ldd	r18, Y+4	; 0x04
     c88:	3d 81       	ldd	r19, Y+5	; 0x05
     c8a:	23 34       	cpi	r18, 0x43	; 67
     c8c:	31 05       	cpc	r19, r1
     c8e:	34 f4       	brge	.+12     	; 0xc9c <DIO_setPINDir+0x40>
     c90:	8c 81       	ldd	r24, Y+4	; 0x04
     c92:	9d 81       	ldd	r25, Y+5	; 0x05
     c94:	81 34       	cpi	r24, 0x41	; 65
     c96:	91 05       	cpc	r25, r1
     c98:	71 f0       	breq	.+28     	; 0xcb6 <DIO_setPINDir+0x5a>
     c9a:	bc c0       	rjmp	.+376    	; 0xe14 <DIO_setPINDir+0x1b8>
     c9c:	2c 81       	ldd	r18, Y+4	; 0x04
     c9e:	3d 81       	ldd	r19, Y+5	; 0x05
     ca0:	23 34       	cpi	r18, 0x43	; 67
     ca2:	31 05       	cpc	r19, r1
     ca4:	09 f4       	brne	.+2      	; 0xca8 <DIO_setPINDir+0x4c>
     ca6:	5f c0       	rjmp	.+190    	; 0xd66 <DIO_setPINDir+0x10a>
     ca8:	8c 81       	ldd	r24, Y+4	; 0x04
     caa:	9d 81       	ldd	r25, Y+5	; 0x05
     cac:	84 34       	cpi	r24, 0x44	; 68
     cae:	91 05       	cpc	r25, r1
     cb0:	09 f4       	brne	.+2      	; 0xcb4 <DIO_setPINDir+0x58>
     cb2:	85 c0       	rjmp	.+266    	; 0xdbe <DIO_setPINDir+0x162>
     cb4:	af c0       	rjmp	.+350    	; 0xe14 <DIO_setPINDir+0x1b8>
	{

	case 'A':
		if( direction==1 )
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <DIO_setPINDir+0x88>
		{
			SET_BIT(DDRA,pin);
     cbc:	aa e3       	ldi	r26, 0x3A	; 58
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	ea e3       	ldi	r30, 0x3A	; 58
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <DIO_setPINDir+0x7e>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <DIO_setPINDir+0x7a>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	98 c0       	rjmp	.+304    	; 0xe14 <DIO_setPINDir+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRA,pin);
     ce4:	aa e3       	ldi	r26, 0x3A	; 58
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	ea e3       	ldi	r30, 0x3A	; 58
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <DIO_setPINDir+0xa6>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <DIO_setPINDir+0xa2>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
     d0c:	83 c0       	rjmp	.+262    	; 0xe14 <DIO_setPINDir+0x1b8>
		}
		break;
	case 'B':
		if( direction==1 )
     d0e:	8b 81       	ldd	r24, Y+3	; 0x03
     d10:	81 30       	cpi	r24, 0x01	; 1
     d12:	a1 f4       	brne	.+40     	; 0xd3c <DIO_setPINDir+0xe0>
		{
			SET_BIT(DDRB,pin);
     d14:	a7 e3       	ldi	r26, 0x37	; 55
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	e7 e3       	ldi	r30, 0x37	; 55
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	48 2f       	mov	r20, r24
     d20:	8a 81       	ldd	r24, Y+2	; 0x02
     d22:	28 2f       	mov	r18, r24
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	02 2e       	mov	r0, r18
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <DIO_setPINDir+0xd6>
     d2e:	88 0f       	add	r24, r24
     d30:	99 1f       	adc	r25, r25
     d32:	0a 94       	dec	r0
     d34:	e2 f7       	brpl	.-8      	; 0xd2e <DIO_setPINDir+0xd2>
     d36:	84 2b       	or	r24, r20
     d38:	8c 93       	st	X, r24
     d3a:	6c c0       	rjmp	.+216    	; 0xe14 <DIO_setPINDir+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRB,pin);
     d3c:	a7 e3       	ldi	r26, 0x37	; 55
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	e7 e3       	ldi	r30, 0x37	; 55
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	48 2f       	mov	r20, r24
     d48:	8a 81       	ldd	r24, Y+2	; 0x02
     d4a:	28 2f       	mov	r18, r24
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	02 2e       	mov	r0, r18
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <DIO_setPINDir+0xfe>
     d56:	88 0f       	add	r24, r24
     d58:	99 1f       	adc	r25, r25
     d5a:	0a 94       	dec	r0
     d5c:	e2 f7       	brpl	.-8      	; 0xd56 <DIO_setPINDir+0xfa>
     d5e:	80 95       	com	r24
     d60:	84 23       	and	r24, r20
     d62:	8c 93       	st	X, r24
     d64:	57 c0       	rjmp	.+174    	; 0xe14 <DIO_setPINDir+0x1b8>
		}
		break;
	case 'C':
		if( direction==1 )
     d66:	8b 81       	ldd	r24, Y+3	; 0x03
     d68:	81 30       	cpi	r24, 0x01	; 1
     d6a:	a1 f4       	brne	.+40     	; 0xd94 <DIO_setPINDir+0x138>
		{
			SET_BIT(DDRC,pin);
     d6c:	a4 e3       	ldi	r26, 0x34	; 52
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	e4 e3       	ldi	r30, 0x34	; 52
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	48 2f       	mov	r20, r24
     d78:	8a 81       	ldd	r24, Y+2	; 0x02
     d7a:	28 2f       	mov	r18, r24
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	02 2e       	mov	r0, r18
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <DIO_setPINDir+0x12e>
     d86:	88 0f       	add	r24, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	0a 94       	dec	r0
     d8c:	e2 f7       	brpl	.-8      	; 0xd86 <DIO_setPINDir+0x12a>
     d8e:	84 2b       	or	r24, r20
     d90:	8c 93       	st	X, r24
     d92:	40 c0       	rjmp	.+128    	; 0xe14 <DIO_setPINDir+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRC,pin);
     d94:	a4 e3       	ldi	r26, 0x34	; 52
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	e4 e3       	ldi	r30, 0x34	; 52
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	48 2f       	mov	r20, r24
     da0:	8a 81       	ldd	r24, Y+2	; 0x02
     da2:	28 2f       	mov	r18, r24
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	02 2e       	mov	r0, r18
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <DIO_setPINDir+0x156>
     dae:	88 0f       	add	r24, r24
     db0:	99 1f       	adc	r25, r25
     db2:	0a 94       	dec	r0
     db4:	e2 f7       	brpl	.-8      	; 0xdae <DIO_setPINDir+0x152>
     db6:	80 95       	com	r24
     db8:	84 23       	and	r24, r20
     dba:	8c 93       	st	X, r24
     dbc:	2b c0       	rjmp	.+86     	; 0xe14 <DIO_setPINDir+0x1b8>
		}
		break;
	case 'D':
		if( direction==1)
     dbe:	8b 81       	ldd	r24, Y+3	; 0x03
     dc0:	81 30       	cpi	r24, 0x01	; 1
     dc2:	a1 f4       	brne	.+40     	; 0xdec <DIO_setPINDir+0x190>
		{
			SET_BIT(DDRD,pin);
     dc4:	a1 e3       	ldi	r26, 0x31	; 49
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	e1 e3       	ldi	r30, 0x31	; 49
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	48 2f       	mov	r20, r24
     dd0:	8a 81       	ldd	r24, Y+2	; 0x02
     dd2:	28 2f       	mov	r18, r24
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	02 2e       	mov	r0, r18
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <DIO_setPINDir+0x186>
     dde:	88 0f       	add	r24, r24
     de0:	99 1f       	adc	r25, r25
     de2:	0a 94       	dec	r0
     de4:	e2 f7       	brpl	.-8      	; 0xdde <DIO_setPINDir+0x182>
     de6:	84 2b       	or	r24, r20
     de8:	8c 93       	st	X, r24
     dea:	14 c0       	rjmp	.+40     	; 0xe14 <DIO_setPINDir+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRD,pin);
     dec:	a1 e3       	ldi	r26, 0x31	; 49
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e1 e3       	ldi	r30, 0x31	; 49
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	48 2f       	mov	r20, r24
     df8:	8a 81       	ldd	r24, Y+2	; 0x02
     dfa:	28 2f       	mov	r18, r24
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	02 2e       	mov	r0, r18
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <DIO_setPINDir+0x1ae>
     e06:	88 0f       	add	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	0a 94       	dec	r0
     e0c:	e2 f7       	brpl	.-8      	; 0xe06 <DIO_setPINDir+0x1aa>
     e0e:	80 95       	com	r24
     e10:	84 23       	and	r24, r20
     e12:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
}
     e14:	0f 90       	pop	r0
     e16:	0f 90       	pop	r0
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	0f 90       	pop	r0
     e1e:	cf 91       	pop	r28
     e20:	df 91       	pop	r29
     e22:	08 95       	ret

00000e24 <DIO_write_PIN>:


void DIO_write_PIN(uint8 portname,uint8 pin,uint8 pinvalue)
{
     e24:	df 93       	push	r29
     e26:	cf 93       	push	r28
     e28:	00 d0       	rcall	.+0      	; 0xe2a <DIO_write_PIN+0x6>
     e2a:	00 d0       	rcall	.+0      	; 0xe2c <DIO_write_PIN+0x8>
     e2c:	0f 92       	push	r0
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	89 83       	std	Y+1, r24	; 0x01
     e34:	6a 83       	std	Y+2, r22	; 0x02
     e36:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     e38:	89 81       	ldd	r24, Y+1	; 0x01
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	3d 83       	std	Y+5, r19	; 0x05
     e40:	2c 83       	std	Y+4, r18	; 0x04
     e42:	8c 81       	ldd	r24, Y+4	; 0x04
     e44:	9d 81       	ldd	r25, Y+5	; 0x05
     e46:	82 34       	cpi	r24, 0x42	; 66
     e48:	91 05       	cpc	r25, r1
     e4a:	09 f4       	brne	.+2      	; 0xe4e <DIO_write_PIN+0x2a>
     e4c:	44 c0       	rjmp	.+136    	; 0xed6 <DIO_write_PIN+0xb2>
     e4e:	2c 81       	ldd	r18, Y+4	; 0x04
     e50:	3d 81       	ldd	r19, Y+5	; 0x05
     e52:	23 34       	cpi	r18, 0x43	; 67
     e54:	31 05       	cpc	r19, r1
     e56:	34 f4       	brge	.+12     	; 0xe64 <DIO_write_PIN+0x40>
     e58:	8c 81       	ldd	r24, Y+4	; 0x04
     e5a:	9d 81       	ldd	r25, Y+5	; 0x05
     e5c:	81 34       	cpi	r24, 0x41	; 65
     e5e:	91 05       	cpc	r25, r1
     e60:	71 f0       	breq	.+28     	; 0xe7e <DIO_write_PIN+0x5a>
     e62:	bc c0       	rjmp	.+376    	; 0xfdc <DIO_write_PIN+0x1b8>
     e64:	2c 81       	ldd	r18, Y+4	; 0x04
     e66:	3d 81       	ldd	r19, Y+5	; 0x05
     e68:	23 34       	cpi	r18, 0x43	; 67
     e6a:	31 05       	cpc	r19, r1
     e6c:	09 f4       	brne	.+2      	; 0xe70 <DIO_write_PIN+0x4c>
     e6e:	5f c0       	rjmp	.+190    	; 0xf2e <DIO_write_PIN+0x10a>
     e70:	8c 81       	ldd	r24, Y+4	; 0x04
     e72:	9d 81       	ldd	r25, Y+5	; 0x05
     e74:	84 34       	cpi	r24, 0x44	; 68
     e76:	91 05       	cpc	r25, r1
     e78:	09 f4       	brne	.+2      	; 0xe7c <DIO_write_PIN+0x58>
     e7a:	85 c0       	rjmp	.+266    	; 0xf86 <DIO_write_PIN+0x162>
     e7c:	af c0       	rjmp	.+350    	; 0xfdc <DIO_write_PIN+0x1b8>
	{

	case 'A':
		if( pinvalue==1 )
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	81 30       	cpi	r24, 0x01	; 1
     e82:	a1 f4       	brne	.+40     	; 0xeac <DIO_write_PIN+0x88>
		{
			SET_BIT(PORTA,pin);
     e84:	ab e3       	ldi	r26, 0x3B	; 59
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	eb e3       	ldi	r30, 0x3B	; 59
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	48 2f       	mov	r20, r24
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	02 2e       	mov	r0, r18
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <DIO_write_PIN+0x7e>
     e9e:	88 0f       	add	r24, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	0a 94       	dec	r0
     ea4:	e2 f7       	brpl	.-8      	; 0xe9e <DIO_write_PIN+0x7a>
     ea6:	84 2b       	or	r24, r20
     ea8:	8c 93       	st	X, r24
     eaa:	98 c0       	rjmp	.+304    	; 0xfdc <DIO_write_PIN+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTA,pin);
     eac:	ab e3       	ldi	r26, 0x3B	; 59
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	eb e3       	ldi	r30, 0x3B	; 59
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	48 2f       	mov	r20, r24
     eb8:	8a 81       	ldd	r24, Y+2	; 0x02
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	02 2e       	mov	r0, r18
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <DIO_write_PIN+0xa6>
     ec6:	88 0f       	add	r24, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	0a 94       	dec	r0
     ecc:	e2 f7       	brpl	.-8      	; 0xec6 <DIO_write_PIN+0xa2>
     ece:	80 95       	com	r24
     ed0:	84 23       	and	r24, r20
     ed2:	8c 93       	st	X, r24
     ed4:	83 c0       	rjmp	.+262    	; 0xfdc <DIO_write_PIN+0x1b8>
		}
		break;
	case 'B':
		if( pinvalue==1 )
     ed6:	8b 81       	ldd	r24, Y+3	; 0x03
     ed8:	81 30       	cpi	r24, 0x01	; 1
     eda:	a1 f4       	brne	.+40     	; 0xf04 <DIO_write_PIN+0xe0>
		{
			SET_BIT(PORTB,pin);
     edc:	a8 e3       	ldi	r26, 0x38	; 56
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e8 e3       	ldi	r30, 0x38	; 56
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	48 2f       	mov	r20, r24
     ee8:	8a 81       	ldd	r24, Y+2	; 0x02
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	02 2e       	mov	r0, r18
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <DIO_write_PIN+0xd6>
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	0a 94       	dec	r0
     efc:	e2 f7       	brpl	.-8      	; 0xef6 <DIO_write_PIN+0xd2>
     efe:	84 2b       	or	r24, r20
     f00:	8c 93       	st	X, r24
     f02:	6c c0       	rjmp	.+216    	; 0xfdc <DIO_write_PIN+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTB,pin);
     f04:	a8 e3       	ldi	r26, 0x38	; 56
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e8 e3       	ldi	r30, 0x38	; 56
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	48 2f       	mov	r20, r24
     f10:	8a 81       	ldd	r24, Y+2	; 0x02
     f12:	28 2f       	mov	r18, r24
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	02 2e       	mov	r0, r18
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <DIO_write_PIN+0xfe>
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	0a 94       	dec	r0
     f24:	e2 f7       	brpl	.-8      	; 0xf1e <DIO_write_PIN+0xfa>
     f26:	80 95       	com	r24
     f28:	84 23       	and	r24, r20
     f2a:	8c 93       	st	X, r24
     f2c:	57 c0       	rjmp	.+174    	; 0xfdc <DIO_write_PIN+0x1b8>
		}
		break;
	case 'C':
		if( pinvalue==1 )
     f2e:	8b 81       	ldd	r24, Y+3	; 0x03
     f30:	81 30       	cpi	r24, 0x01	; 1
     f32:	a1 f4       	brne	.+40     	; 0xf5c <DIO_write_PIN+0x138>
		{
			SET_BIT(PORTC,pin);
     f34:	a5 e3       	ldi	r26, 0x35	; 53
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e5 e3       	ldi	r30, 0x35	; 53
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	48 2f       	mov	r20, r24
     f40:	8a 81       	ldd	r24, Y+2	; 0x02
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	02 2e       	mov	r0, r18
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <DIO_write_PIN+0x12e>
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	0a 94       	dec	r0
     f54:	e2 f7       	brpl	.-8      	; 0xf4e <DIO_write_PIN+0x12a>
     f56:	84 2b       	or	r24, r20
     f58:	8c 93       	st	X, r24
     f5a:	40 c0       	rjmp	.+128    	; 0xfdc <DIO_write_PIN+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTC,pin);
     f5c:	a5 e3       	ldi	r26, 0x35	; 53
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e5 e3       	ldi	r30, 0x35	; 53
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	48 2f       	mov	r20, r24
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	28 2f       	mov	r18, r24
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	02 2e       	mov	r0, r18
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <DIO_write_PIN+0x156>
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	0a 94       	dec	r0
     f7c:	e2 f7       	brpl	.-8      	; 0xf76 <DIO_write_PIN+0x152>
     f7e:	80 95       	com	r24
     f80:	84 23       	and	r24, r20
     f82:	8c 93       	st	X, r24
     f84:	2b c0       	rjmp	.+86     	; 0xfdc <DIO_write_PIN+0x1b8>
		}
		break;
	case 'D':
		if( pinvalue==1)
     f86:	8b 81       	ldd	r24, Y+3	; 0x03
     f88:	81 30       	cpi	r24, 0x01	; 1
     f8a:	a1 f4       	brne	.+40     	; 0xfb4 <DIO_write_PIN+0x190>
		{
			SET_BIT(PORTD,pin);
     f8c:	a2 e3       	ldi	r26, 0x32	; 50
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e2 e3       	ldi	r30, 0x32	; 50
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	48 2f       	mov	r20, r24
     f98:	8a 81       	ldd	r24, Y+2	; 0x02
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	02 2e       	mov	r0, r18
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <DIO_write_PIN+0x186>
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	0a 94       	dec	r0
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <DIO_write_PIN+0x182>
     fae:	84 2b       	or	r24, r20
     fb0:	8c 93       	st	X, r24
     fb2:	14 c0       	rjmp	.+40     	; 0xfdc <DIO_write_PIN+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTD,pin);
     fb4:	a2 e3       	ldi	r26, 0x32	; 50
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e2 e3       	ldi	r30, 0x32	; 50
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	48 2f       	mov	r20, r24
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	02 2e       	mov	r0, r18
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <DIO_write_PIN+0x1ae>
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	0a 94       	dec	r0
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <DIO_write_PIN+0x1aa>
     fd6:	80 95       	com	r24
     fd8:	84 23       	and	r24, r20
     fda:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
}
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
     fe6:	cf 91       	pop	r28
     fe8:	df 91       	pop	r29
     fea:	08 95       	ret

00000fec <DIO_read_PIN>:

uint8 DIO_read_PIN(uint8 portname,uint8 pin)
{
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <DIO_read_PIN+0x6>
     ff2:	00 d0       	rcall	.+0      	; 0xff4 <DIO_read_PIN+0x8>
     ff4:	0f 92       	push	r0
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
     ffa:	8a 83       	std	Y+2, r24	; 0x02
     ffc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_val=0;
     ffe:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	3d 83       	std	Y+5, r19	; 0x05
    1008:	2c 83       	std	Y+4, r18	; 0x04
    100a:	8c 81       	ldd	r24, Y+4	; 0x04
    100c:	9d 81       	ldd	r25, Y+5	; 0x05
    100e:	82 34       	cpi	r24, 0x42	; 66
    1010:	91 05       	cpc	r25, r1
    1012:	41 f1       	breq	.+80     	; 0x1064 <DIO_read_PIN+0x78>
    1014:	2c 81       	ldd	r18, Y+4	; 0x04
    1016:	3d 81       	ldd	r19, Y+5	; 0x05
    1018:	23 34       	cpi	r18, 0x43	; 67
    101a:	31 05       	cpc	r19, r1
    101c:	34 f4       	brge	.+12     	; 0x102a <DIO_read_PIN+0x3e>
    101e:	8c 81       	ldd	r24, Y+4	; 0x04
    1020:	9d 81       	ldd	r25, Y+5	; 0x05
    1022:	81 34       	cpi	r24, 0x41	; 65
    1024:	91 05       	cpc	r25, r1
    1026:	61 f0       	breq	.+24     	; 0x1040 <DIO_read_PIN+0x54>
    1028:	52 c0       	rjmp	.+164    	; 0x10ce <DIO_read_PIN+0xe2>
    102a:	2c 81       	ldd	r18, Y+4	; 0x04
    102c:	3d 81       	ldd	r19, Y+5	; 0x05
    102e:	23 34       	cpi	r18, 0x43	; 67
    1030:	31 05       	cpc	r19, r1
    1032:	51 f1       	breq	.+84     	; 0x1088 <DIO_read_PIN+0x9c>
    1034:	8c 81       	ldd	r24, Y+4	; 0x04
    1036:	9d 81       	ldd	r25, Y+5	; 0x05
    1038:	84 34       	cpi	r24, 0x44	; 68
    103a:	91 05       	cpc	r25, r1
    103c:	b9 f1       	breq	.+110    	; 0x10ac <DIO_read_PIN+0xc0>
    103e:	47 c0       	rjmp	.+142    	; 0x10ce <DIO_read_PIN+0xe2>
	{

	case 'A':
		pin_val=READ_BIT(PINA,pin);
    1040:	e9 e3       	ldi	r30, 0x39	; 57
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	48 2f       	mov	r20, r24
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	28 2f       	mov	r18, r24
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	02 2e       	mov	r0, r18
    1054:	02 c0       	rjmp	.+4      	; 0x105a <DIO_read_PIN+0x6e>
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	0a 94       	dec	r0
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <DIO_read_PIN+0x6a>
    105e:	84 23       	and	r24, r20
    1060:	89 83       	std	Y+1, r24	; 0x01
    1062:	35 c0       	rjmp	.+106    	; 0x10ce <DIO_read_PIN+0xe2>
		break;
	case 'B':
		pin_val=READ_BIT(PINB,pin);
    1064:	e6 e3       	ldi	r30, 0x36	; 54
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	48 2f       	mov	r20, r24
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	02 2e       	mov	r0, r18
    1078:	02 c0       	rjmp	.+4      	; 0x107e <DIO_read_PIN+0x92>
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	0a 94       	dec	r0
    1080:	e2 f7       	brpl	.-8      	; 0x107a <DIO_read_PIN+0x8e>
    1082:	84 23       	and	r24, r20
    1084:	89 83       	std	Y+1, r24	; 0x01
    1086:	23 c0       	rjmp	.+70     	; 0x10ce <DIO_read_PIN+0xe2>
		break;
	case 'C':
		pin_val=READ_BIT(PINC,pin);
    1088:	e3 e3       	ldi	r30, 0x33	; 51
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	48 2f       	mov	r20, r24
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	02 2e       	mov	r0, r18
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <DIO_read_PIN+0xb6>
    109e:	88 0f       	add	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	0a 94       	dec	r0
    10a4:	e2 f7       	brpl	.-8      	; 0x109e <DIO_read_PIN+0xb2>
    10a6:	84 23       	and	r24, r20
    10a8:	89 83       	std	Y+1, r24	; 0x01
    10aa:	11 c0       	rjmp	.+34     	; 0x10ce <DIO_read_PIN+0xe2>
		break;
	case 'D':
		pin_val=READ_BIT(PIND,pin);
    10ac:	e0 e3       	ldi	r30, 0x30	; 48
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	48 2f       	mov	r20, r24
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	02 2e       	mov	r0, r18
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <DIO_read_PIN+0xda>
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	0a 94       	dec	r0
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <DIO_read_PIN+0xd6>
    10ca:	84 23       	and	r24, r20
    10cc:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	return pin_val;
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	08 95       	ret

000010e0 <DIO_BIT_TOGGLE>:

void DIO_BIT_TOGGLE(uint8 portname,uint8 pin)
{
    10e0:	df 93       	push	r29
    10e2:	cf 93       	push	r28
    10e4:	00 d0       	rcall	.+0      	; 0x10e6 <DIO_BIT_TOGGLE+0x6>
    10e6:	00 d0       	rcall	.+0      	; 0x10e8 <DIO_BIT_TOGGLE+0x8>
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	89 83       	std	Y+1, r24	; 0x01
    10ee:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	3c 83       	std	Y+4, r19	; 0x04
    10f8:	2b 83       	std	Y+3, r18	; 0x03
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	9c 81       	ldd	r25, Y+4	; 0x04
    10fe:	82 34       	cpi	r24, 0x42	; 66
    1100:	91 05       	cpc	r25, r1
    1102:	51 f1       	breq	.+84     	; 0x1158 <DIO_BIT_TOGGLE+0x78>
    1104:	2b 81       	ldd	r18, Y+3	; 0x03
    1106:	3c 81       	ldd	r19, Y+4	; 0x04
    1108:	23 34       	cpi	r18, 0x43	; 67
    110a:	31 05       	cpc	r19, r1
    110c:	34 f4       	brge	.+12     	; 0x111a <DIO_BIT_TOGGLE+0x3a>
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	9c 81       	ldd	r25, Y+4	; 0x04
    1112:	81 34       	cpi	r24, 0x41	; 65
    1114:	91 05       	cpc	r25, r1
    1116:	61 f0       	breq	.+24     	; 0x1130 <DIO_BIT_TOGGLE+0x50>
    1118:	5a c0       	rjmp	.+180    	; 0x11ce <DIO_BIT_TOGGLE+0xee>
    111a:	2b 81       	ldd	r18, Y+3	; 0x03
    111c:	3c 81       	ldd	r19, Y+4	; 0x04
    111e:	23 34       	cpi	r18, 0x43	; 67
    1120:	31 05       	cpc	r19, r1
    1122:	71 f1       	breq	.+92     	; 0x1180 <DIO_BIT_TOGGLE+0xa0>
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	9c 81       	ldd	r25, Y+4	; 0x04
    1128:	84 34       	cpi	r24, 0x44	; 68
    112a:	91 05       	cpc	r25, r1
    112c:	e9 f1       	breq	.+122    	; 0x11a8 <DIO_BIT_TOGGLE+0xc8>
    112e:	4f c0       	rjmp	.+158    	; 0x11ce <DIO_BIT_TOGGLE+0xee>
	{

	case 'A':
		TOGGLE_BIT(PORTA,pin);
    1130:	ab e3       	ldi	r26, 0x3B	; 59
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	eb e3       	ldi	r30, 0x3B	; 59
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	48 2f       	mov	r20, r24
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	02 2e       	mov	r0, r18
    1148:	02 c0       	rjmp	.+4      	; 0x114e <DIO_BIT_TOGGLE+0x6e>
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	0a 94       	dec	r0
    1150:	e2 f7       	brpl	.-8      	; 0x114a <DIO_BIT_TOGGLE+0x6a>
    1152:	84 27       	eor	r24, r20
    1154:	8c 93       	st	X, r24
    1156:	3b c0       	rjmp	.+118    	; 0x11ce <DIO_BIT_TOGGLE+0xee>
		break;
	case 'B':
		TOGGLE_BIT(PORTB,pin);
    1158:	a8 e3       	ldi	r26, 0x38	; 56
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e8 e3       	ldi	r30, 0x38	; 56
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	48 2f       	mov	r20, r24
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	02 2e       	mov	r0, r18
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <DIO_BIT_TOGGLE+0x96>
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	0a 94       	dec	r0
    1178:	e2 f7       	brpl	.-8      	; 0x1172 <DIO_BIT_TOGGLE+0x92>
    117a:	84 27       	eor	r24, r20
    117c:	8c 93       	st	X, r24
    117e:	27 c0       	rjmp	.+78     	; 0x11ce <DIO_BIT_TOGGLE+0xee>
		break;
	case 'C':
		TOGGLE_BIT(PORTC,pin);
    1180:	a5 e3       	ldi	r26, 0x35	; 53
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e5 e3       	ldi	r30, 0x35	; 53
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	48 2f       	mov	r20, r24
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	02 2e       	mov	r0, r18
    1198:	02 c0       	rjmp	.+4      	; 0x119e <DIO_BIT_TOGGLE+0xbe>
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	0a 94       	dec	r0
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <DIO_BIT_TOGGLE+0xba>
    11a2:	84 27       	eor	r24, r20
    11a4:	8c 93       	st	X, r24
    11a6:	13 c0       	rjmp	.+38     	; 0x11ce <DIO_BIT_TOGGLE+0xee>
		break;
	case 'D':
		TOGGLE_BIT(PORTD,pin);
    11a8:	a2 e3       	ldi	r26, 0x32	; 50
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e2 e3       	ldi	r30, 0x32	; 50
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	48 2f       	mov	r20, r24
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	02 2e       	mov	r0, r18
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <DIO_BIT_TOGGLE+0xe6>
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	0a 94       	dec	r0
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <DIO_BIT_TOGGLE+0xe2>
    11ca:	84 27       	eor	r24, r20
    11cc:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	cf 91       	pop	r28
    11d8:	df 91       	pop	r29
    11da:	08 95       	ret

000011dc <DIO_set_port_Dir>:

void DIO_set_port_Dir(uint8 portname,uint8 direction)
{
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	00 d0       	rcall	.+0      	; 0x11e2 <DIO_set_port_Dir+0x6>
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <DIO_set_port_Dir+0x8>
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	89 83       	std	Y+1, r24	; 0x01
    11ea:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	3c 83       	std	Y+4, r19	; 0x04
    11f4:	2b 83       	std	Y+3, r18	; 0x03
    11f6:	8b 81       	ldd	r24, Y+3	; 0x03
    11f8:	9c 81       	ldd	r25, Y+4	; 0x04
    11fa:	82 34       	cpi	r24, 0x42	; 66
    11fc:	91 05       	cpc	r25, r1
    11fe:	11 f1       	breq	.+68     	; 0x1244 <DIO_set_port_Dir+0x68>
    1200:	2b 81       	ldd	r18, Y+3	; 0x03
    1202:	3c 81       	ldd	r19, Y+4	; 0x04
    1204:	23 34       	cpi	r18, 0x43	; 67
    1206:	31 05       	cpc	r19, r1
    1208:	34 f4       	brge	.+12     	; 0x1216 <DIO_set_port_Dir+0x3a>
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	9c 81       	ldd	r25, Y+4	; 0x04
    120e:	81 34       	cpi	r24, 0x41	; 65
    1210:	91 05       	cpc	r25, r1
    1212:	61 f0       	breq	.+24     	; 0x122c <DIO_set_port_Dir+0x50>
    1214:	3a c0       	rjmp	.+116    	; 0x128a <DIO_set_port_Dir+0xae>
    1216:	2b 81       	ldd	r18, Y+3	; 0x03
    1218:	3c 81       	ldd	r19, Y+4	; 0x04
    121a:	23 34       	cpi	r18, 0x43	; 67
    121c:	31 05       	cpc	r19, r1
    121e:	f1 f0       	breq	.+60     	; 0x125c <DIO_set_port_Dir+0x80>
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	9c 81       	ldd	r25, Y+4	; 0x04
    1224:	84 34       	cpi	r24, 0x44	; 68
    1226:	91 05       	cpc	r25, r1
    1228:	29 f1       	breq	.+74     	; 0x1274 <DIO_set_port_Dir+0x98>
    122a:	2f c0       	rjmp	.+94     	; 0x128a <DIO_set_port_Dir+0xae>
	{
	case 'A':
		if(direction==1)
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	81 30       	cpi	r24, 0x01	; 1
    1230:	29 f4       	brne	.+10     	; 0x123c <DIO_set_port_Dir+0x60>
		{
			DDRA=0xFF;
    1232:	ea e3       	ldi	r30, 0x3A	; 58
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	8f ef       	ldi	r24, 0xFF	; 255
    1238:	80 83       	st	Z, r24
    123a:	27 c0       	rjmp	.+78     	; 0x128a <DIO_set_port_Dir+0xae>
		}
		else
		{
			DDRA=0;
    123c:	ea e3       	ldi	r30, 0x3A	; 58
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	10 82       	st	Z, r1
    1242:	23 c0       	rjmp	.+70     	; 0x128a <DIO_set_port_Dir+0xae>
		}
		break;
	case 'B':
		if(direction==1)
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	81 30       	cpi	r24, 0x01	; 1
    1248:	29 f4       	brne	.+10     	; 0x1254 <DIO_set_port_Dir+0x78>
		{
			DDRB=0xFF;
    124a:	e7 e3       	ldi	r30, 0x37	; 55
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	8f ef       	ldi	r24, 0xFF	; 255
    1250:	80 83       	st	Z, r24
    1252:	1b c0       	rjmp	.+54     	; 0x128a <DIO_set_port_Dir+0xae>
		}
		else
		{
			DDRB=0;
    1254:	e7 e3       	ldi	r30, 0x37	; 55
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	10 82       	st	Z, r1
    125a:	17 c0       	rjmp	.+46     	; 0x128a <DIO_set_port_Dir+0xae>
		}
		break;
	case 'C':
		if(direction==1)
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	81 30       	cpi	r24, 0x01	; 1
    1260:	29 f4       	brne	.+10     	; 0x126c <DIO_set_port_Dir+0x90>
		{
			DDRC=0XFF;
    1262:	e4 e3       	ldi	r30, 0x34	; 52
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	8f ef       	ldi	r24, 0xFF	; 255
    1268:	80 83       	st	Z, r24
    126a:	0f c0       	rjmp	.+30     	; 0x128a <DIO_set_port_Dir+0xae>
		}
		else
		{
			DDRC=0;
    126c:	e4 e3       	ldi	r30, 0x34	; 52
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	10 82       	st	Z, r1
    1272:	0b c0       	rjmp	.+22     	; 0x128a <DIO_set_port_Dir+0xae>
		}
		break;
	case 'D':
		if(direction==1)
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	81 30       	cpi	r24, 0x01	; 1
    1278:	29 f4       	brne	.+10     	; 0x1284 <DIO_set_port_Dir+0xa8>
		{
			DDRD=0XFF;
    127a:	e1 e3       	ldi	r30, 0x31	; 49
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	8f ef       	ldi	r24, 0xFF	; 255
    1280:	80 83       	st	Z, r24
    1282:	03 c0       	rjmp	.+6      	; 0x128a <DIO_set_port_Dir+0xae>
		}
		else
		{
			DDRD=0;
    1284:	e1 e3       	ldi	r30, 0x31	; 49
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	10 82       	st	Z, r1
		}
		break;
	default:
		break;
	}
}
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	cf 91       	pop	r28
    1294:	df 91       	pop	r29
    1296:	08 95       	ret

00001298 <DIO_write_port>:

void DIO_write_port(uint8 portname,uint8 portvalue)
{
    1298:	df 93       	push	r29
    129a:	cf 93       	push	r28
    129c:	00 d0       	rcall	.+0      	; 0x129e <DIO_write_port+0x6>
    129e:	00 d0       	rcall	.+0      	; 0x12a0 <DIO_write_port+0x8>
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
    12a4:	89 83       	std	Y+1, r24	; 0x01
    12a6:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	3c 83       	std	Y+4, r19	; 0x04
    12b0:	2b 83       	std	Y+3, r18	; 0x03
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	9c 81       	ldd	r25, Y+4	; 0x04
    12b6:	82 34       	cpi	r24, 0x42	; 66
    12b8:	91 05       	cpc	r25, r1
    12ba:	d9 f0       	breq	.+54     	; 0x12f2 <DIO_write_port+0x5a>
    12bc:	2b 81       	ldd	r18, Y+3	; 0x03
    12be:	3c 81       	ldd	r19, Y+4	; 0x04
    12c0:	23 34       	cpi	r18, 0x43	; 67
    12c2:	31 05       	cpc	r19, r1
    12c4:	34 f4       	brge	.+12     	; 0x12d2 <DIO_write_port+0x3a>
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ca:	81 34       	cpi	r24, 0x41	; 65
    12cc:	91 05       	cpc	r25, r1
    12ce:	61 f0       	breq	.+24     	; 0x12e8 <DIO_write_port+0x50>
    12d0:	1e c0       	rjmp	.+60     	; 0x130e <DIO_write_port+0x76>
    12d2:	2b 81       	ldd	r18, Y+3	; 0x03
    12d4:	3c 81       	ldd	r19, Y+4	; 0x04
    12d6:	23 34       	cpi	r18, 0x43	; 67
    12d8:	31 05       	cpc	r19, r1
    12da:	81 f0       	breq	.+32     	; 0x12fc <DIO_write_port+0x64>
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	9c 81       	ldd	r25, Y+4	; 0x04
    12e0:	84 34       	cpi	r24, 0x44	; 68
    12e2:	91 05       	cpc	r25, r1
    12e4:	81 f0       	breq	.+32     	; 0x1306 <DIO_write_port+0x6e>
    12e6:	13 c0       	rjmp	.+38     	; 0x130e <DIO_write_port+0x76>
	{
	case 'A':
		PORTA=portvalue;
    12e8:	eb e3       	ldi	r30, 0x3B	; 59
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	80 83       	st	Z, r24
    12f0:	0e c0       	rjmp	.+28     	; 0x130e <DIO_write_port+0x76>
		break;
	case 'B':
		PORTB=portvalue;
    12f2:	e8 e3       	ldi	r30, 0x38	; 56
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	80 83       	st	Z, r24
    12fa:	09 c0       	rjmp	.+18     	; 0x130e <DIO_write_port+0x76>
		break;
	case 'C':
		PORTC=portvalue;
    12fc:	e5 e3       	ldi	r30, 0x35	; 53
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	80 83       	st	Z, r24
    1304:	04 c0       	rjmp	.+8      	; 0x130e <DIO_write_port+0x76>
		break;
	case 'D':
		PORTD=portvalue;
    1306:	e2 e3       	ldi	r30, 0x32	; 50
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	80 83       	st	Z, r24
	}
}
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	08 95       	ret

0000131c <DIO_read_port>:

uint8 DIO_read_port(uint8 portname)
{
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	00 d0       	rcall	.+0      	; 0x1322 <DIO_read_port+0x6>
    1322:	00 d0       	rcall	.+0      	; 0x1324 <DIO_read_port+0x8>
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
    1328:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_val=0;
    132a:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	3c 83       	std	Y+4, r19	; 0x04
    1334:	2b 83       	std	Y+3, r18	; 0x03
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	9c 81       	ldd	r25, Y+4	; 0x04
    133a:	82 34       	cpi	r24, 0x42	; 66
    133c:	91 05       	cpc	r25, r1
    133e:	d9 f0       	breq	.+54     	; 0x1376 <DIO_read_port+0x5a>
    1340:	2b 81       	ldd	r18, Y+3	; 0x03
    1342:	3c 81       	ldd	r19, Y+4	; 0x04
    1344:	23 34       	cpi	r18, 0x43	; 67
    1346:	31 05       	cpc	r19, r1
    1348:	34 f4       	brge	.+12     	; 0x1356 <DIO_read_port+0x3a>
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	9c 81       	ldd	r25, Y+4	; 0x04
    134e:	81 34       	cpi	r24, 0x41	; 65
    1350:	91 05       	cpc	r25, r1
    1352:	61 f0       	breq	.+24     	; 0x136c <DIO_read_port+0x50>
    1354:	1e c0       	rjmp	.+60     	; 0x1392 <DIO_read_port+0x76>
    1356:	2b 81       	ldd	r18, Y+3	; 0x03
    1358:	3c 81       	ldd	r19, Y+4	; 0x04
    135a:	23 34       	cpi	r18, 0x43	; 67
    135c:	31 05       	cpc	r19, r1
    135e:	81 f0       	breq	.+32     	; 0x1380 <DIO_read_port+0x64>
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	9c 81       	ldd	r25, Y+4	; 0x04
    1364:	84 34       	cpi	r24, 0x44	; 68
    1366:	91 05       	cpc	r25, r1
    1368:	81 f0       	breq	.+32     	; 0x138a <DIO_read_port+0x6e>
    136a:	13 c0       	rjmp	.+38     	; 0x1392 <DIO_read_port+0x76>
	{

	case 'A':
		port_val=PINA;
    136c:	e9 e3       	ldi	r30, 0x39	; 57
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	89 83       	std	Y+1, r24	; 0x01
    1374:	0e c0       	rjmp	.+28     	; 0x1392 <DIO_read_port+0x76>
		break;
	case 'B':
		port_val=PINB;
    1376:	e6 e3       	ldi	r30, 0x36	; 54
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	89 83       	std	Y+1, r24	; 0x01
    137e:	09 c0       	rjmp	.+18     	; 0x1392 <DIO_read_port+0x76>
		break;
	case 'C':
		port_val=PINC;
    1380:	e3 e3       	ldi	r30, 0x33	; 51
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	89 83       	std	Y+1, r24	; 0x01
    1388:	04 c0       	rjmp	.+8      	; 0x1392 <DIO_read_port+0x76>
		break;
	case 'D':
		port_val=PIND;
    138a:	e0 e3       	ldi	r30, 0x30	; 48
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	return port_val;
    1392:	89 81       	ldd	r24, Y+1	; 0x01
}
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	cf 91       	pop	r28
    139e:	df 91       	pop	r29
    13a0:	08 95       	ret

000013a2 <DIO_enablePullup_pin>:

void DIO_enablePullup_pin(uint8 portname,uint8 pin,uint8 status)
{
    13a2:	df 93       	push	r29
    13a4:	cf 93       	push	r28
    13a6:	00 d0       	rcall	.+0      	; 0x13a8 <DIO_enablePullup_pin+0x6>
    13a8:	00 d0       	rcall	.+0      	; 0x13aa <DIO_enablePullup_pin+0x8>
    13aa:	0f 92       	push	r0
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	89 83       	std	Y+1, r24	; 0x01
    13b2:	6a 83       	std	Y+2, r22	; 0x02
    13b4:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    13b6:	89 81       	ldd	r24, Y+1	; 0x01
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	3d 83       	std	Y+5, r19	; 0x05
    13be:	2c 83       	std	Y+4, r18	; 0x04
    13c0:	8c 81       	ldd	r24, Y+4	; 0x04
    13c2:	9d 81       	ldd	r25, Y+5	; 0x05
    13c4:	82 34       	cpi	r24, 0x42	; 66
    13c6:	91 05       	cpc	r25, r1
    13c8:	09 f4       	brne	.+2      	; 0x13cc <DIO_enablePullup_pin+0x2a>
    13ca:	44 c0       	rjmp	.+136    	; 0x1454 <DIO_enablePullup_pin+0xb2>
    13cc:	2c 81       	ldd	r18, Y+4	; 0x04
    13ce:	3d 81       	ldd	r19, Y+5	; 0x05
    13d0:	23 34       	cpi	r18, 0x43	; 67
    13d2:	31 05       	cpc	r19, r1
    13d4:	34 f4       	brge	.+12     	; 0x13e2 <DIO_enablePullup_pin+0x40>
    13d6:	8c 81       	ldd	r24, Y+4	; 0x04
    13d8:	9d 81       	ldd	r25, Y+5	; 0x05
    13da:	81 34       	cpi	r24, 0x41	; 65
    13dc:	91 05       	cpc	r25, r1
    13de:	71 f0       	breq	.+28     	; 0x13fc <DIO_enablePullup_pin+0x5a>
    13e0:	bc c0       	rjmp	.+376    	; 0x155a <DIO_enablePullup_pin+0x1b8>
    13e2:	2c 81       	ldd	r18, Y+4	; 0x04
    13e4:	3d 81       	ldd	r19, Y+5	; 0x05
    13e6:	23 34       	cpi	r18, 0x43	; 67
    13e8:	31 05       	cpc	r19, r1
    13ea:	09 f4       	brne	.+2      	; 0x13ee <DIO_enablePullup_pin+0x4c>
    13ec:	5f c0       	rjmp	.+190    	; 0x14ac <DIO_enablePullup_pin+0x10a>
    13ee:	8c 81       	ldd	r24, Y+4	; 0x04
    13f0:	9d 81       	ldd	r25, Y+5	; 0x05
    13f2:	84 34       	cpi	r24, 0x44	; 68
    13f4:	91 05       	cpc	r25, r1
    13f6:	09 f4       	brne	.+2      	; 0x13fa <DIO_enablePullup_pin+0x58>
    13f8:	85 c0       	rjmp	.+266    	; 0x1504 <DIO_enablePullup_pin+0x162>
    13fa:	af c0       	rjmp	.+350    	; 0x155a <DIO_enablePullup_pin+0x1b8>
	{
	case 'A':
		if(status==1)
    13fc:	8b 81       	ldd	r24, Y+3	; 0x03
    13fe:	81 30       	cpi	r24, 0x01	; 1
    1400:	a1 f4       	brne	.+40     	; 0x142a <DIO_enablePullup_pin+0x88>
		{
			SET_BIT(PORTA,pin);
    1402:	ab e3       	ldi	r26, 0x3B	; 59
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	eb e3       	ldi	r30, 0x3B	; 59
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	48 2f       	mov	r20, r24
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	02 2e       	mov	r0, r18
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <DIO_enablePullup_pin+0x7e>
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	0a 94       	dec	r0
    1422:	e2 f7       	brpl	.-8      	; 0x141c <DIO_enablePullup_pin+0x7a>
    1424:	84 2b       	or	r24, r20
    1426:	8c 93       	st	X, r24
    1428:	98 c0       	rjmp	.+304    	; 0x155a <DIO_enablePullup_pin+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTA,pin);
    142a:	ab e3       	ldi	r26, 0x3B	; 59
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	eb e3       	ldi	r30, 0x3B	; 59
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	48 2f       	mov	r20, r24
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	02 2e       	mov	r0, r18
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <DIO_enablePullup_pin+0xa6>
    1444:	88 0f       	add	r24, r24
    1446:	99 1f       	adc	r25, r25
    1448:	0a 94       	dec	r0
    144a:	e2 f7       	brpl	.-8      	; 0x1444 <DIO_enablePullup_pin+0xa2>
    144c:	80 95       	com	r24
    144e:	84 23       	and	r24, r20
    1450:	8c 93       	st	X, r24
    1452:	83 c0       	rjmp	.+262    	; 0x155a <DIO_enablePullup_pin+0x1b8>
		}
		break;
	case 'B':
		if(status==1)
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	81 30       	cpi	r24, 0x01	; 1
    1458:	a1 f4       	brne	.+40     	; 0x1482 <DIO_enablePullup_pin+0xe0>
				{
					SET_BIT(PORTB,pin);
    145a:	a8 e3       	ldi	r26, 0x38	; 56
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e8 e3       	ldi	r30, 0x38	; 56
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	48 2f       	mov	r20, r24
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	28 2f       	mov	r18, r24
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	02 2e       	mov	r0, r18
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <DIO_enablePullup_pin+0xd6>
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	0a 94       	dec	r0
    147a:	e2 f7       	brpl	.-8      	; 0x1474 <DIO_enablePullup_pin+0xd2>
    147c:	84 2b       	or	r24, r20
    147e:	8c 93       	st	X, r24
    1480:	6c c0       	rjmp	.+216    	; 0x155a <DIO_enablePullup_pin+0x1b8>
				}
				else
				{
					CLEAR_BIT(PORTB,pin);
    1482:	a8 e3       	ldi	r26, 0x38	; 56
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	e8 e3       	ldi	r30, 0x38	; 56
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	48 2f       	mov	r20, r24
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	28 2f       	mov	r18, r24
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	02 2e       	mov	r0, r18
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <DIO_enablePullup_pin+0xfe>
    149c:	88 0f       	add	r24, r24
    149e:	99 1f       	adc	r25, r25
    14a0:	0a 94       	dec	r0
    14a2:	e2 f7       	brpl	.-8      	; 0x149c <DIO_enablePullup_pin+0xfa>
    14a4:	80 95       	com	r24
    14a6:	84 23       	and	r24, r20
    14a8:	8c 93       	st	X, r24
    14aa:	57 c0       	rjmp	.+174    	; 0x155a <DIO_enablePullup_pin+0x1b8>
				}
				break;
	case 'C':
		if(status==1)
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	81 30       	cpi	r24, 0x01	; 1
    14b0:	a1 f4       	brne	.+40     	; 0x14da <DIO_enablePullup_pin+0x138>
				{
					SET_BIT(PORTC,pin);
    14b2:	a5 e3       	ldi	r26, 0x35	; 53
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	e5 e3       	ldi	r30, 0x35	; 53
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	48 2f       	mov	r20, r24
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	02 2e       	mov	r0, r18
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <DIO_enablePullup_pin+0x12e>
    14cc:	88 0f       	add	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	0a 94       	dec	r0
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <DIO_enablePullup_pin+0x12a>
    14d4:	84 2b       	or	r24, r20
    14d6:	8c 93       	st	X, r24
    14d8:	40 c0       	rjmp	.+128    	; 0x155a <DIO_enablePullup_pin+0x1b8>
				}
				else
				{
					CLEAR_BIT(PORTC,pin);
    14da:	a5 e3       	ldi	r26, 0x35	; 53
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e5 e3       	ldi	r30, 0x35	; 53
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	48 2f       	mov	r20, r24
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	02 2e       	mov	r0, r18
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <DIO_enablePullup_pin+0x156>
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	0a 94       	dec	r0
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <DIO_enablePullup_pin+0x152>
    14fc:	80 95       	com	r24
    14fe:	84 23       	and	r24, r20
    1500:	8c 93       	st	X, r24
    1502:	2b c0       	rjmp	.+86     	; 0x155a <DIO_enablePullup_pin+0x1b8>
				}
				break;
	case 'D':
		if(status==1)
    1504:	8b 81       	ldd	r24, Y+3	; 0x03
    1506:	81 30       	cpi	r24, 0x01	; 1
    1508:	a1 f4       	brne	.+40     	; 0x1532 <DIO_enablePullup_pin+0x190>
				{
					SET_BIT(PORTD,pin);
    150a:	a2 e3       	ldi	r26, 0x32	; 50
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	e2 e3       	ldi	r30, 0x32	; 50
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	48 2f       	mov	r20, r24
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	28 2f       	mov	r18, r24
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	02 2e       	mov	r0, r18
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <DIO_enablePullup_pin+0x186>
    1524:	88 0f       	add	r24, r24
    1526:	99 1f       	adc	r25, r25
    1528:	0a 94       	dec	r0
    152a:	e2 f7       	brpl	.-8      	; 0x1524 <DIO_enablePullup_pin+0x182>
    152c:	84 2b       	or	r24, r20
    152e:	8c 93       	st	X, r24
    1530:	14 c0       	rjmp	.+40     	; 0x155a <DIO_enablePullup_pin+0x1b8>
				}
				else
				{
					CLEAR_BIT(PORTD,pin);
    1532:	a2 e3       	ldi	r26, 0x32	; 50
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	e2 e3       	ldi	r30, 0x32	; 50
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	48 2f       	mov	r20, r24
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	28 2f       	mov	r18, r24
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	02 2e       	mov	r0, r18
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <DIO_enablePullup_pin+0x1ae>
    154c:	88 0f       	add	r24, r24
    154e:	99 1f       	adc	r25, r25
    1550:	0a 94       	dec	r0
    1552:	e2 f7       	brpl	.-8      	; 0x154c <DIO_enablePullup_pin+0x1aa>
    1554:	80 95       	com	r24
    1556:	84 23       	and	r24, r20
    1558:	8c 93       	st	X, r24
				}
				break;
	}
}
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	08 95       	ret

0000156a <DIO_write_low_nibble>:

void DIO_write_low_nibble(uint8 portname,uint8 value)
{
    156a:	df 93       	push	r29
    156c:	cf 93       	push	r28
    156e:	00 d0       	rcall	.+0      	; 0x1570 <DIO_write_low_nibble+0x6>
    1570:	00 d0       	rcall	.+0      	; 0x1572 <DIO_write_low_nibble+0x8>
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
    1576:	89 83       	std	Y+1, r24	; 0x01
    1578:	6a 83       	std	Y+2, r22	; 0x02
	value&=0x0f;
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	8f 70       	andi	r24, 0x0F	; 15
    157e:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	3c 83       	std	Y+4, r19	; 0x04
    1588:	2b 83       	std	Y+3, r18	; 0x03
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	9c 81       	ldd	r25, Y+4	; 0x04
    158e:	82 34       	cpi	r24, 0x42	; 66
    1590:	91 05       	cpc	r25, r1
    1592:	31 f1       	breq	.+76     	; 0x15e0 <DIO_write_low_nibble+0x76>
    1594:	2b 81       	ldd	r18, Y+3	; 0x03
    1596:	3c 81       	ldd	r19, Y+4	; 0x04
    1598:	23 34       	cpi	r18, 0x43	; 67
    159a:	31 05       	cpc	r19, r1
    159c:	34 f4       	brge	.+12     	; 0x15aa <DIO_write_low_nibble+0x40>
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	9c 81       	ldd	r25, Y+4	; 0x04
    15a2:	81 34       	cpi	r24, 0x41	; 65
    15a4:	91 05       	cpc	r25, r1
    15a6:	61 f0       	breq	.+24     	; 0x15c0 <DIO_write_low_nibble+0x56>
    15a8:	4a c0       	rjmp	.+148    	; 0x163e <DIO_write_low_nibble+0xd4>
    15aa:	2b 81       	ldd	r18, Y+3	; 0x03
    15ac:	3c 81       	ldd	r19, Y+4	; 0x04
    15ae:	23 34       	cpi	r18, 0x43	; 67
    15b0:	31 05       	cpc	r19, r1
    15b2:	31 f1       	breq	.+76     	; 0x1600 <DIO_write_low_nibble+0x96>
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	9c 81       	ldd	r25, Y+4	; 0x04
    15b8:	84 34       	cpi	r24, 0x44	; 68
    15ba:	91 05       	cpc	r25, r1
    15bc:	89 f1       	breq	.+98     	; 0x1620 <DIO_write_low_nibble+0xb6>
    15be:	3f c0       	rjmp	.+126    	; 0x163e <DIO_write_low_nibble+0xd4>
	{
	case 'A':
		PORTA&=0xf0;
    15c0:	ab e3       	ldi	r26, 0x3B	; 59
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	eb e3       	ldi	r30, 0x3B	; 59
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	80 7f       	andi	r24, 0xF0	; 240
    15cc:	8c 93       	st	X, r24
		PORTA|=value;
    15ce:	ab e3       	ldi	r26, 0x3B	; 59
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	eb e3       	ldi	r30, 0x3B	; 59
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	90 81       	ld	r25, Z
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	89 2b       	or	r24, r25
    15dc:	8c 93       	st	X, r24
    15de:	2f c0       	rjmp	.+94     	; 0x163e <DIO_write_low_nibble+0xd4>
		break;
	case 'B':
		PORTB&=0xf0;
    15e0:	a8 e3       	ldi	r26, 0x38	; 56
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e8 e3       	ldi	r30, 0x38	; 56
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	80 7f       	andi	r24, 0xF0	; 240
    15ec:	8c 93       	st	X, r24
		PORTA|=value;
    15ee:	ab e3       	ldi	r26, 0x3B	; 59
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	eb e3       	ldi	r30, 0x3B	; 59
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	90 81       	ld	r25, Z
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	89 2b       	or	r24, r25
    15fc:	8c 93       	st	X, r24
    15fe:	1f c0       	rjmp	.+62     	; 0x163e <DIO_write_low_nibble+0xd4>
		break;
	case 'C':
		PORTC&=0xf0;
    1600:	a5 e3       	ldi	r26, 0x35	; 53
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	e5 e3       	ldi	r30, 0x35	; 53
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	80 7f       	andi	r24, 0xF0	; 240
    160c:	8c 93       	st	X, r24
		PORTA|=value;
    160e:	ab e3       	ldi	r26, 0x3B	; 59
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	eb e3       	ldi	r30, 0x3B	; 59
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	90 81       	ld	r25, Z
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	89 2b       	or	r24, r25
    161c:	8c 93       	st	X, r24
    161e:	0f c0       	rjmp	.+30     	; 0x163e <DIO_write_low_nibble+0xd4>
		break;
	case 'D':
		PORTD&=0xf0;
    1620:	a2 e3       	ldi	r26, 0x32	; 50
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	e2 e3       	ldi	r30, 0x32	; 50
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	80 7f       	andi	r24, 0xF0	; 240
    162c:	8c 93       	st	X, r24
		PORTD|=value;
    162e:	a2 e3       	ldi	r26, 0x32	; 50
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	e2 e3       	ldi	r30, 0x32	; 50
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	90 81       	ld	r25, Z
    1638:	8a 81       	ldd	r24, Y+2	; 0x02
    163a:	89 2b       	or	r24, r25
    163c:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	cf 91       	pop	r28
    1648:	df 91       	pop	r29
    164a:	08 95       	ret

0000164c <DIO_set_low_nibble>:

void DIO_set_low_nibble(uint8 portname)
{
    164c:	df 93       	push	r29
    164e:	cf 93       	push	r28
    1650:	00 d0       	rcall	.+0      	; 0x1652 <DIO_set_low_nibble+0x6>
    1652:	0f 92       	push	r0
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
    1658:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	3b 83       	std	Y+3, r19	; 0x03
    1662:	2a 83       	std	Y+2, r18	; 0x02
    1664:	8a 81       	ldd	r24, Y+2	; 0x02
    1666:	9b 81       	ldd	r25, Y+3	; 0x03
    1668:	82 34       	cpi	r24, 0x42	; 66
    166a:	91 05       	cpc	r25, r1
    166c:	f1 f0       	breq	.+60     	; 0x16aa <DIO_set_low_nibble+0x5e>
    166e:	2a 81       	ldd	r18, Y+2	; 0x02
    1670:	3b 81       	ldd	r19, Y+3	; 0x03
    1672:	23 34       	cpi	r18, 0x43	; 67
    1674:	31 05       	cpc	r19, r1
    1676:	34 f4       	brge	.+12     	; 0x1684 <DIO_set_low_nibble+0x38>
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	9b 81       	ldd	r25, Y+3	; 0x03
    167c:	81 34       	cpi	r24, 0x41	; 65
    167e:	91 05       	cpc	r25, r1
    1680:	61 f0       	breq	.+24     	; 0x169a <DIO_set_low_nibble+0x4e>
    1682:	2a c0       	rjmp	.+84     	; 0x16d8 <DIO_set_low_nibble+0x8c>
    1684:	2a 81       	ldd	r18, Y+2	; 0x02
    1686:	3b 81       	ldd	r19, Y+3	; 0x03
    1688:	23 34       	cpi	r18, 0x43	; 67
    168a:	31 05       	cpc	r19, r1
    168c:	b1 f0       	breq	.+44     	; 0x16ba <DIO_set_low_nibble+0x6e>
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	9b 81       	ldd	r25, Y+3	; 0x03
    1692:	84 34       	cpi	r24, 0x44	; 68
    1694:	91 05       	cpc	r25, r1
    1696:	c9 f0       	breq	.+50     	; 0x16ca <DIO_set_low_nibble+0x7e>
    1698:	1f c0       	rjmp	.+62     	; 0x16d8 <DIO_set_low_nibble+0x8c>
	{
	case 'A':
		PORTA|=0x0f;
    169a:	ab e3       	ldi	r26, 0x3B	; 59
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	eb e3       	ldi	r30, 0x3B	; 59
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	8f 60       	ori	r24, 0x0F	; 15
    16a6:	8c 93       	st	X, r24
    16a8:	17 c0       	rjmp	.+46     	; 0x16d8 <DIO_set_low_nibble+0x8c>
		break;
	case 'B':
		PORTB|=0x0f;
    16aa:	a8 e3       	ldi	r26, 0x38	; 56
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e8 e3       	ldi	r30, 0x38	; 56
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	8f 60       	ori	r24, 0x0F	; 15
    16b6:	8c 93       	st	X, r24
    16b8:	0f c0       	rjmp	.+30     	; 0x16d8 <DIO_set_low_nibble+0x8c>
		break;
	case 'C':
		PORTC|=0x0f;
    16ba:	a5 e3       	ldi	r26, 0x35	; 53
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e5 e3       	ldi	r30, 0x35	; 53
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	8f 60       	ori	r24, 0x0F	; 15
    16c6:	8c 93       	st	X, r24
    16c8:	07 c0       	rjmp	.+14     	; 0x16d8 <DIO_set_low_nibble+0x8c>
		break;
	case 'D':
		PORTD|=0x0f;
    16ca:	a2 e3       	ldi	r26, 0x32	; 50
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	e2 e3       	ldi	r30, 0x32	; 50
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	8f 60       	ori	r24, 0x0F	; 15
    16d6:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	cf 91       	pop	r28
    16e0:	df 91       	pop	r29
    16e2:	08 95       	ret

000016e4 <DIO_clear_low_nibble>:

void DIO_clear_low_nibble(uint8 portname)
{
    16e4:	df 93       	push	r29
    16e6:	cf 93       	push	r28
    16e8:	00 d0       	rcall	.+0      	; 0x16ea <DIO_clear_low_nibble+0x6>
    16ea:	0f 92       	push	r0
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
    16f0:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	3b 83       	std	Y+3, r19	; 0x03
    16fa:	2a 83       	std	Y+2, r18	; 0x02
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1700:	82 34       	cpi	r24, 0x42	; 66
    1702:	91 05       	cpc	r25, r1
    1704:	f1 f0       	breq	.+60     	; 0x1742 <DIO_clear_low_nibble+0x5e>
    1706:	2a 81       	ldd	r18, Y+2	; 0x02
    1708:	3b 81       	ldd	r19, Y+3	; 0x03
    170a:	23 34       	cpi	r18, 0x43	; 67
    170c:	31 05       	cpc	r19, r1
    170e:	34 f4       	brge	.+12     	; 0x171c <DIO_clear_low_nibble+0x38>
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	9b 81       	ldd	r25, Y+3	; 0x03
    1714:	81 34       	cpi	r24, 0x41	; 65
    1716:	91 05       	cpc	r25, r1
    1718:	61 f0       	breq	.+24     	; 0x1732 <DIO_clear_low_nibble+0x4e>
    171a:	2a c0       	rjmp	.+84     	; 0x1770 <DIO_clear_low_nibble+0x8c>
    171c:	2a 81       	ldd	r18, Y+2	; 0x02
    171e:	3b 81       	ldd	r19, Y+3	; 0x03
    1720:	23 34       	cpi	r18, 0x43	; 67
    1722:	31 05       	cpc	r19, r1
    1724:	b1 f0       	breq	.+44     	; 0x1752 <DIO_clear_low_nibble+0x6e>
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	9b 81       	ldd	r25, Y+3	; 0x03
    172a:	84 34       	cpi	r24, 0x44	; 68
    172c:	91 05       	cpc	r25, r1
    172e:	c9 f0       	breq	.+50     	; 0x1762 <DIO_clear_low_nibble+0x7e>
    1730:	1f c0       	rjmp	.+62     	; 0x1770 <DIO_clear_low_nibble+0x8c>
	{
	case 'A':
		PORTA&=~(0x0f);
    1732:	ab e3       	ldi	r26, 0x3B	; 59
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	eb e3       	ldi	r30, 0x3B	; 59
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	80 7f       	andi	r24, 0xF0	; 240
    173e:	8c 93       	st	X, r24
    1740:	17 c0       	rjmp	.+46     	; 0x1770 <DIO_clear_low_nibble+0x8c>
		break;
	case 'B':
		PORTB&=~(0x0f);
    1742:	a8 e3       	ldi	r26, 0x38	; 56
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e8 e3       	ldi	r30, 0x38	; 56
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	80 7f       	andi	r24, 0xF0	; 240
    174e:	8c 93       	st	X, r24
    1750:	0f c0       	rjmp	.+30     	; 0x1770 <DIO_clear_low_nibble+0x8c>
		break;
	case 'C':
		PORTC&=~(0x0f);
    1752:	a5 e3       	ldi	r26, 0x35	; 53
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	e5 e3       	ldi	r30, 0x35	; 53
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	80 7f       	andi	r24, 0xF0	; 240
    175e:	8c 93       	st	X, r24
    1760:	07 c0       	rjmp	.+14     	; 0x1770 <DIO_clear_low_nibble+0x8c>
		break;
	case 'D':
		PORTD&=~(0x0f);
    1762:	a2 e3       	ldi	r26, 0x32	; 50
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	e2 e3       	ldi	r30, 0x32	; 50
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	80 7f       	andi	r24, 0xF0	; 240
    176e:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	cf 91       	pop	r28
    1778:	df 91       	pop	r29
    177a:	08 95       	ret

0000177c <DIO_set_high_nibble>:

void DIO_set_high_nibble(uint8 portname)
{
    177c:	df 93       	push	r29
    177e:	cf 93       	push	r28
    1780:	00 d0       	rcall	.+0      	; 0x1782 <DIO_set_high_nibble+0x6>
    1782:	0f 92       	push	r0
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
    1788:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    178a:	89 81       	ldd	r24, Y+1	; 0x01
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	3b 83       	std	Y+3, r19	; 0x03
    1792:	2a 83       	std	Y+2, r18	; 0x02
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	9b 81       	ldd	r25, Y+3	; 0x03
    1798:	82 34       	cpi	r24, 0x42	; 66
    179a:	91 05       	cpc	r25, r1
    179c:	f1 f0       	breq	.+60     	; 0x17da <DIO_set_high_nibble+0x5e>
    179e:	2a 81       	ldd	r18, Y+2	; 0x02
    17a0:	3b 81       	ldd	r19, Y+3	; 0x03
    17a2:	23 34       	cpi	r18, 0x43	; 67
    17a4:	31 05       	cpc	r19, r1
    17a6:	34 f4       	brge	.+12     	; 0x17b4 <DIO_set_high_nibble+0x38>
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	9b 81       	ldd	r25, Y+3	; 0x03
    17ac:	81 34       	cpi	r24, 0x41	; 65
    17ae:	91 05       	cpc	r25, r1
    17b0:	61 f0       	breq	.+24     	; 0x17ca <DIO_set_high_nibble+0x4e>
    17b2:	2a c0       	rjmp	.+84     	; 0x1808 <DIO_set_high_nibble+0x8c>
    17b4:	2a 81       	ldd	r18, Y+2	; 0x02
    17b6:	3b 81       	ldd	r19, Y+3	; 0x03
    17b8:	23 34       	cpi	r18, 0x43	; 67
    17ba:	31 05       	cpc	r19, r1
    17bc:	b1 f0       	breq	.+44     	; 0x17ea <DIO_set_high_nibble+0x6e>
    17be:	8a 81       	ldd	r24, Y+2	; 0x02
    17c0:	9b 81       	ldd	r25, Y+3	; 0x03
    17c2:	84 34       	cpi	r24, 0x44	; 68
    17c4:	91 05       	cpc	r25, r1
    17c6:	c9 f0       	breq	.+50     	; 0x17fa <DIO_set_high_nibble+0x7e>
    17c8:	1f c0       	rjmp	.+62     	; 0x1808 <DIO_set_high_nibble+0x8c>
	{
	case 'A':
		PORTA|=0xf0;
    17ca:	ab e3       	ldi	r26, 0x3B	; 59
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	eb e3       	ldi	r30, 0x3B	; 59
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	80 6f       	ori	r24, 0xF0	; 240
    17d6:	8c 93       	st	X, r24
    17d8:	17 c0       	rjmp	.+46     	; 0x1808 <DIO_set_high_nibble+0x8c>
		break;
	case 'B':
		PORTB|=0xf0;
    17da:	a8 e3       	ldi	r26, 0x38	; 56
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e8 e3       	ldi	r30, 0x38	; 56
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	80 6f       	ori	r24, 0xF0	; 240
    17e6:	8c 93       	st	X, r24
    17e8:	0f c0       	rjmp	.+30     	; 0x1808 <DIO_set_high_nibble+0x8c>
		break;
	case 'C':
		PORTC|=0xf0;
    17ea:	a5 e3       	ldi	r26, 0x35	; 53
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	e5 e3       	ldi	r30, 0x35	; 53
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	80 6f       	ori	r24, 0xF0	; 240
    17f6:	8c 93       	st	X, r24
    17f8:	07 c0       	rjmp	.+14     	; 0x1808 <DIO_set_high_nibble+0x8c>
		break;
	case 'D':
		PORTD|=0xf0;
    17fa:	a2 e3       	ldi	r26, 0x32	; 50
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	e2 e3       	ldi	r30, 0x32	; 50
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	80 6f       	ori	r24, 0xF0	; 240
    1806:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    1808:	0f 90       	pop	r0
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	cf 91       	pop	r28
    1810:	df 91       	pop	r29
    1812:	08 95       	ret

00001814 <DIO_clear_high_nibble>:

void DIO_clear_high_nibble(uint8 portname)
{
    1814:	df 93       	push	r29
    1816:	cf 93       	push	r28
    1818:	00 d0       	rcall	.+0      	; 0x181a <DIO_clear_high_nibble+0x6>
    181a:	0f 92       	push	r0
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
    1820:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    1822:	89 81       	ldd	r24, Y+1	; 0x01
    1824:	28 2f       	mov	r18, r24
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	3b 83       	std	Y+3, r19	; 0x03
    182a:	2a 83       	std	Y+2, r18	; 0x02
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	9b 81       	ldd	r25, Y+3	; 0x03
    1830:	82 34       	cpi	r24, 0x42	; 66
    1832:	91 05       	cpc	r25, r1
    1834:	f1 f0       	breq	.+60     	; 0x1872 <DIO_clear_high_nibble+0x5e>
    1836:	2a 81       	ldd	r18, Y+2	; 0x02
    1838:	3b 81       	ldd	r19, Y+3	; 0x03
    183a:	23 34       	cpi	r18, 0x43	; 67
    183c:	31 05       	cpc	r19, r1
    183e:	34 f4       	brge	.+12     	; 0x184c <DIO_clear_high_nibble+0x38>
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	9b 81       	ldd	r25, Y+3	; 0x03
    1844:	81 34       	cpi	r24, 0x41	; 65
    1846:	91 05       	cpc	r25, r1
    1848:	61 f0       	breq	.+24     	; 0x1862 <DIO_clear_high_nibble+0x4e>
    184a:	2a c0       	rjmp	.+84     	; 0x18a0 <DIO_clear_high_nibble+0x8c>
    184c:	2a 81       	ldd	r18, Y+2	; 0x02
    184e:	3b 81       	ldd	r19, Y+3	; 0x03
    1850:	23 34       	cpi	r18, 0x43	; 67
    1852:	31 05       	cpc	r19, r1
    1854:	b1 f0       	breq	.+44     	; 0x1882 <DIO_clear_high_nibble+0x6e>
    1856:	8a 81       	ldd	r24, Y+2	; 0x02
    1858:	9b 81       	ldd	r25, Y+3	; 0x03
    185a:	84 34       	cpi	r24, 0x44	; 68
    185c:	91 05       	cpc	r25, r1
    185e:	c9 f0       	breq	.+50     	; 0x1892 <DIO_clear_high_nibble+0x7e>
    1860:	1f c0       	rjmp	.+62     	; 0x18a0 <DIO_clear_high_nibble+0x8c>
	{
	case 'A':
		PORTA&=~(0xf0);
    1862:	ab e3       	ldi	r26, 0x3B	; 59
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	eb e3       	ldi	r30, 0x3B	; 59
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	8f 70       	andi	r24, 0x0F	; 15
    186e:	8c 93       	st	X, r24
    1870:	17 c0       	rjmp	.+46     	; 0x18a0 <DIO_clear_high_nibble+0x8c>
		break;
	case 'B':
		PORTB&=~(0xf0);
    1872:	a8 e3       	ldi	r26, 0x38	; 56
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	e8 e3       	ldi	r30, 0x38	; 56
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	8f 70       	andi	r24, 0x0F	; 15
    187e:	8c 93       	st	X, r24
    1880:	0f c0       	rjmp	.+30     	; 0x18a0 <DIO_clear_high_nibble+0x8c>
		break;
	case 'C':
		PORTC&=~(0xf0);
    1882:	a5 e3       	ldi	r26, 0x35	; 53
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	e5 e3       	ldi	r30, 0x35	; 53
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	8f 70       	andi	r24, 0x0F	; 15
    188e:	8c 93       	st	X, r24
    1890:	07 c0       	rjmp	.+14     	; 0x18a0 <DIO_clear_high_nibble+0x8c>
		break;
	case 'D':
		PORTD&=~(0xf0);
    1892:	a2 e3       	ldi	r26, 0x32	; 50
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	e2 e3       	ldi	r30, 0x32	; 50
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	8f 70       	andi	r24, 0x0F	; 15
    189e:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    18a0:	0f 90       	pop	r0
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	cf 91       	pop	r28
    18a8:	df 91       	pop	r29
    18aa:	08 95       	ret

000018ac <DIO_write_high_nibble>:

void DIO_write_high_nibble(uint8 portname,uint8 value)
{
    18ac:	df 93       	push	r29
    18ae:	cf 93       	push	r28
    18b0:	00 d0       	rcall	.+0      	; 0x18b2 <DIO_write_high_nibble+0x6>
    18b2:	00 d0       	rcall	.+0      	; 0x18b4 <DIO_write_high_nibble+0x8>
    18b4:	cd b7       	in	r28, 0x3d	; 61
    18b6:	de b7       	in	r29, 0x3e	; 62
    18b8:	89 83       	std	Y+1, r24	; 0x01
    18ba:	6a 83       	std	Y+2, r22	; 0x02
	value<<=4;
    18bc:	8a 81       	ldd	r24, Y+2	; 0x02
    18be:	82 95       	swap	r24
    18c0:	80 7f       	andi	r24, 0xF0	; 240
    18c2:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
    18c6:	28 2f       	mov	r18, r24
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	3c 83       	std	Y+4, r19	; 0x04
    18cc:	2b 83       	std	Y+3, r18	; 0x03
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	9c 81       	ldd	r25, Y+4	; 0x04
    18d2:	82 34       	cpi	r24, 0x42	; 66
    18d4:	91 05       	cpc	r25, r1
    18d6:	31 f1       	breq	.+76     	; 0x1924 <DIO_write_high_nibble+0x78>
    18d8:	2b 81       	ldd	r18, Y+3	; 0x03
    18da:	3c 81       	ldd	r19, Y+4	; 0x04
    18dc:	23 34       	cpi	r18, 0x43	; 67
    18de:	31 05       	cpc	r19, r1
    18e0:	34 f4       	brge	.+12     	; 0x18ee <DIO_write_high_nibble+0x42>
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	9c 81       	ldd	r25, Y+4	; 0x04
    18e6:	81 34       	cpi	r24, 0x41	; 65
    18e8:	91 05       	cpc	r25, r1
    18ea:	61 f0       	breq	.+24     	; 0x1904 <DIO_write_high_nibble+0x58>
    18ec:	4a c0       	rjmp	.+148    	; 0x1982 <DIO_write_high_nibble+0xd6>
    18ee:	2b 81       	ldd	r18, Y+3	; 0x03
    18f0:	3c 81       	ldd	r19, Y+4	; 0x04
    18f2:	23 34       	cpi	r18, 0x43	; 67
    18f4:	31 05       	cpc	r19, r1
    18f6:	31 f1       	breq	.+76     	; 0x1944 <DIO_write_high_nibble+0x98>
    18f8:	8b 81       	ldd	r24, Y+3	; 0x03
    18fa:	9c 81       	ldd	r25, Y+4	; 0x04
    18fc:	84 34       	cpi	r24, 0x44	; 68
    18fe:	91 05       	cpc	r25, r1
    1900:	89 f1       	breq	.+98     	; 0x1964 <DIO_write_high_nibble+0xb8>
    1902:	3f c0       	rjmp	.+126    	; 0x1982 <DIO_write_high_nibble+0xd6>
	{
	case 'A':
		PORTA&=0x0f;
    1904:	ab e3       	ldi	r26, 0x3B	; 59
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	eb e3       	ldi	r30, 0x3B	; 59
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	8f 70       	andi	r24, 0x0F	; 15
    1910:	8c 93       	st	X, r24
		PORTA|=value;
    1912:	ab e3       	ldi	r26, 0x3B	; 59
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	eb e3       	ldi	r30, 0x3B	; 59
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	90 81       	ld	r25, Z
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	89 2b       	or	r24, r25
    1920:	8c 93       	st	X, r24
    1922:	2f c0       	rjmp	.+94     	; 0x1982 <DIO_write_high_nibble+0xd6>
		break;
	case 'B':
		PORTB&=0x0f;
    1924:	a8 e3       	ldi	r26, 0x38	; 56
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	e8 e3       	ldi	r30, 0x38	; 56
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	8f 70       	andi	r24, 0x0F	; 15
    1930:	8c 93       	st	X, r24
		PORTA|=value;
    1932:	ab e3       	ldi	r26, 0x3B	; 59
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	eb e3       	ldi	r30, 0x3B	; 59
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	90 81       	ld	r25, Z
    193c:	8a 81       	ldd	r24, Y+2	; 0x02
    193e:	89 2b       	or	r24, r25
    1940:	8c 93       	st	X, r24
    1942:	1f c0       	rjmp	.+62     	; 0x1982 <DIO_write_high_nibble+0xd6>
		break;
	case 'C':
		PORTC&=0x0f;
    1944:	a5 e3       	ldi	r26, 0x35	; 53
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	e5 e3       	ldi	r30, 0x35	; 53
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	8f 70       	andi	r24, 0x0F	; 15
    1950:	8c 93       	st	X, r24
		PORTA|=value;
    1952:	ab e3       	ldi	r26, 0x3B	; 59
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	eb e3       	ldi	r30, 0x3B	; 59
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	90 81       	ld	r25, Z
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	89 2b       	or	r24, r25
    1960:	8c 93       	st	X, r24
    1962:	0f c0       	rjmp	.+30     	; 0x1982 <DIO_write_high_nibble+0xd6>
		break;
	case 'D':
		PORTD&=0x0f;
    1964:	a2 e3       	ldi	r26, 0x32	; 50
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	e2 e3       	ldi	r30, 0x32	; 50
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	8f 70       	andi	r24, 0x0F	; 15
    1970:	8c 93       	st	X, r24
		PORTD|=value;
    1972:	a2 e3       	ldi	r26, 0x32	; 50
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	e2 e3       	ldi	r30, 0x32	; 50
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	90 81       	ld	r25, Z
    197c:	8a 81       	ldd	r24, Y+2	; 0x02
    197e:	89 2b       	or	r24, r25
    1980:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	08 95       	ret

00001990 <DIO_write_high_nibbleDir>:

void DIO_write_high_nibbleDir(uint8 portname,uint8 direction)
{
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	00 d0       	rcall	.+0      	; 0x1996 <DIO_write_high_nibbleDir+0x6>
    1996:	00 d0       	rcall	.+0      	; 0x1998 <DIO_write_high_nibbleDir+0x8>
    1998:	cd b7       	in	r28, 0x3d	; 61
    199a:	de b7       	in	r29, 0x3e	; 62
    199c:	89 83       	std	Y+1, r24	; 0x01
    199e:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    19a0:	89 81       	ldd	r24, Y+1	; 0x01
    19a2:	28 2f       	mov	r18, r24
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	3c 83       	std	Y+4, r19	; 0x04
    19a8:	2b 83       	std	Y+3, r18	; 0x03
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	9c 81       	ldd	r25, Y+4	; 0x04
    19ae:	82 34       	cpi	r24, 0x42	; 66
    19b0:	91 05       	cpc	r25, r1
    19b2:	49 f1       	breq	.+82     	; 0x1a06 <DIO_write_high_nibbleDir+0x76>
    19b4:	2b 81       	ldd	r18, Y+3	; 0x03
    19b6:	3c 81       	ldd	r19, Y+4	; 0x04
    19b8:	23 34       	cpi	r18, 0x43	; 67
    19ba:	31 05       	cpc	r19, r1
    19bc:	34 f4       	brge	.+12     	; 0x19ca <DIO_write_high_nibbleDir+0x3a>
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	9c 81       	ldd	r25, Y+4	; 0x04
    19c2:	81 34       	cpi	r24, 0x41	; 65
    19c4:	91 05       	cpc	r25, r1
    19c6:	61 f0       	breq	.+24     	; 0x19e0 <DIO_write_high_nibbleDir+0x50>
    19c8:	56 c0       	rjmp	.+172    	; 0x1a76 <DIO_write_high_nibbleDir+0xe6>
    19ca:	2b 81       	ldd	r18, Y+3	; 0x03
    19cc:	3c 81       	ldd	r19, Y+4	; 0x04
    19ce:	23 34       	cpi	r18, 0x43	; 67
    19d0:	31 05       	cpc	r19, r1
    19d2:	61 f1       	breq	.+88     	; 0x1a2c <DIO_write_high_nibbleDir+0x9c>
    19d4:	8b 81       	ldd	r24, Y+3	; 0x03
    19d6:	9c 81       	ldd	r25, Y+4	; 0x04
    19d8:	84 34       	cpi	r24, 0x44	; 68
    19da:	91 05       	cpc	r25, r1
    19dc:	d1 f1       	breq	.+116    	; 0x1a52 <DIO_write_high_nibbleDir+0xc2>
    19de:	4b c0       	rjmp	.+150    	; 0x1a76 <DIO_write_high_nibbleDir+0xe6>
	{
	case 'A':
		if(direction==1)
    19e0:	8a 81       	ldd	r24, Y+2	; 0x02
    19e2:	81 30       	cpi	r24, 0x01	; 1
    19e4:	41 f4       	brne	.+16     	; 0x19f6 <DIO_write_high_nibbleDir+0x66>
			DDRA|=0xf0;
    19e6:	aa e3       	ldi	r26, 0x3A	; 58
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	ea e3       	ldi	r30, 0x3A	; 58
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	80 6f       	ori	r24, 0xF0	; 240
    19f2:	8c 93       	st	X, r24
    19f4:	40 c0       	rjmp	.+128    	; 0x1a76 <DIO_write_high_nibbleDir+0xe6>
		else
			DDRA&=~(0xf0);
    19f6:	aa e3       	ldi	r26, 0x3A	; 58
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	ea e3       	ldi	r30, 0x3A	; 58
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	8f 70       	andi	r24, 0x0F	; 15
    1a02:	8c 93       	st	X, r24
    1a04:	38 c0       	rjmp	.+112    	; 0x1a76 <DIO_write_high_nibbleDir+0xe6>
		break;
	case 'B':
		if(direction==1)
    1a06:	8a 81       	ldd	r24, Y+2	; 0x02
    1a08:	81 30       	cpi	r24, 0x01	; 1
    1a0a:	41 f4       	brne	.+16     	; 0x1a1c <DIO_write_high_nibbleDir+0x8c>
			DDRB|=0xf0;
    1a0c:	a7 e3       	ldi	r26, 0x37	; 55
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	e7 e3       	ldi	r30, 0x37	; 55
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	80 6f       	ori	r24, 0xF0	; 240
    1a18:	8c 93       	st	X, r24
    1a1a:	2d c0       	rjmp	.+90     	; 0x1a76 <DIO_write_high_nibbleDir+0xe6>
		else
			DDRB&=~(0xf0);
    1a1c:	a7 e3       	ldi	r26, 0x37	; 55
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	e7 e3       	ldi	r30, 0x37	; 55
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	8f 70       	andi	r24, 0x0F	; 15
    1a28:	8c 93       	st	X, r24
    1a2a:	25 c0       	rjmp	.+74     	; 0x1a76 <DIO_write_high_nibbleDir+0xe6>
		break;
	case 'C':
		if(direction==1)
    1a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2e:	81 30       	cpi	r24, 0x01	; 1
    1a30:	41 f4       	brne	.+16     	; 0x1a42 <DIO_write_high_nibbleDir+0xb2>
			DDRC|=0xf0;
    1a32:	a4 e3       	ldi	r26, 0x34	; 52
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	e4 e3       	ldi	r30, 0x34	; 52
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	80 6f       	ori	r24, 0xF0	; 240
    1a3e:	8c 93       	st	X, r24
    1a40:	1a c0       	rjmp	.+52     	; 0x1a76 <DIO_write_high_nibbleDir+0xe6>
		else
			DDRC&=~(0xf0);
    1a42:	a4 e3       	ldi	r26, 0x34	; 52
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	e4 e3       	ldi	r30, 0x34	; 52
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	8f 70       	andi	r24, 0x0F	; 15
    1a4e:	8c 93       	st	X, r24
    1a50:	12 c0       	rjmp	.+36     	; 0x1a76 <DIO_write_high_nibbleDir+0xe6>
		break;
	case 'D':
		if(direction==1)
    1a52:	8a 81       	ldd	r24, Y+2	; 0x02
    1a54:	81 30       	cpi	r24, 0x01	; 1
    1a56:	41 f4       	brne	.+16     	; 0x1a68 <DIO_write_high_nibbleDir+0xd8>
			DDRD|=0xf0;
    1a58:	a1 e3       	ldi	r26, 0x31	; 49
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e1 e3       	ldi	r30, 0x31	; 49
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	80 6f       	ori	r24, 0xF0	; 240
    1a64:	8c 93       	st	X, r24
    1a66:	07 c0       	rjmp	.+14     	; 0x1a76 <DIO_write_high_nibbleDir+0xe6>
		else
			DDRD&=~(0xf0);
    1a68:	a1 e3       	ldi	r26, 0x31	; 49
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e1 e3       	ldi	r30, 0x31	; 49
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	8f 70       	andi	r24, 0x0F	; 15
    1a74:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    1a76:	0f 90       	pop	r0
    1a78:	0f 90       	pop	r0
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	cf 91       	pop	r28
    1a80:	df 91       	pop	r29
    1a82:	08 95       	ret

00001a84 <DIO_write_low_nibbleDir>:

void DIO_write_low_nibbleDir(uint8 portname,uint8 direction)
{
    1a84:	df 93       	push	r29
    1a86:	cf 93       	push	r28
    1a88:	00 d0       	rcall	.+0      	; 0x1a8a <DIO_write_low_nibbleDir+0x6>
    1a8a:	00 d0       	rcall	.+0      	; 0x1a8c <DIO_write_low_nibbleDir+0x8>
    1a8c:	cd b7       	in	r28, 0x3d	; 61
    1a8e:	de b7       	in	r29, 0x3e	; 62
    1a90:	89 83       	std	Y+1, r24	; 0x01
    1a92:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1a94:	89 81       	ldd	r24, Y+1	; 0x01
    1a96:	28 2f       	mov	r18, r24
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	3c 83       	std	Y+4, r19	; 0x04
    1a9c:	2b 83       	std	Y+3, r18	; 0x03
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa2:	82 34       	cpi	r24, 0x42	; 66
    1aa4:	91 05       	cpc	r25, r1
    1aa6:	49 f1       	breq	.+82     	; 0x1afa <DIO_write_low_nibbleDir+0x76>
    1aa8:	2b 81       	ldd	r18, Y+3	; 0x03
    1aaa:	3c 81       	ldd	r19, Y+4	; 0x04
    1aac:	23 34       	cpi	r18, 0x43	; 67
    1aae:	31 05       	cpc	r19, r1
    1ab0:	34 f4       	brge	.+12     	; 0x1abe <DIO_write_low_nibbleDir+0x3a>
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab6:	81 34       	cpi	r24, 0x41	; 65
    1ab8:	91 05       	cpc	r25, r1
    1aba:	61 f0       	breq	.+24     	; 0x1ad4 <DIO_write_low_nibbleDir+0x50>
    1abc:	56 c0       	rjmp	.+172    	; 0x1b6a <DIO_write_low_nibbleDir+0xe6>
    1abe:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ac2:	23 34       	cpi	r18, 0x43	; 67
    1ac4:	31 05       	cpc	r19, r1
    1ac6:	61 f1       	breq	.+88     	; 0x1b20 <DIO_write_low_nibbleDir+0x9c>
    1ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aca:	9c 81       	ldd	r25, Y+4	; 0x04
    1acc:	84 34       	cpi	r24, 0x44	; 68
    1ace:	91 05       	cpc	r25, r1
    1ad0:	d1 f1       	breq	.+116    	; 0x1b46 <DIO_write_low_nibbleDir+0xc2>
    1ad2:	4b c0       	rjmp	.+150    	; 0x1b6a <DIO_write_low_nibbleDir+0xe6>
	{
	case 'A':
		if(direction==1)
    1ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad6:	81 30       	cpi	r24, 0x01	; 1
    1ad8:	41 f4       	brne	.+16     	; 0x1aea <DIO_write_low_nibbleDir+0x66>
			DDRA|=0x0f;
    1ada:	aa e3       	ldi	r26, 0x3A	; 58
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	ea e3       	ldi	r30, 0x3A	; 58
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	8f 60       	ori	r24, 0x0F	; 15
    1ae6:	8c 93       	st	X, r24
    1ae8:	40 c0       	rjmp	.+128    	; 0x1b6a <DIO_write_low_nibbleDir+0xe6>
		else
			DDRA&=~(0x0f);
    1aea:	aa e3       	ldi	r26, 0x3A	; 58
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	ea e3       	ldi	r30, 0x3A	; 58
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	80 7f       	andi	r24, 0xF0	; 240
    1af6:	8c 93       	st	X, r24
    1af8:	38 c0       	rjmp	.+112    	; 0x1b6a <DIO_write_low_nibbleDir+0xe6>
		break;
	case 'B':
		if(direction==1)
    1afa:	8a 81       	ldd	r24, Y+2	; 0x02
    1afc:	81 30       	cpi	r24, 0x01	; 1
    1afe:	41 f4       	brne	.+16     	; 0x1b10 <DIO_write_low_nibbleDir+0x8c>
			DDRB|=0x0f;
    1b00:	a7 e3       	ldi	r26, 0x37	; 55
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e7 e3       	ldi	r30, 0x37	; 55
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	8f 60       	ori	r24, 0x0F	; 15
    1b0c:	8c 93       	st	X, r24
    1b0e:	2d c0       	rjmp	.+90     	; 0x1b6a <DIO_write_low_nibbleDir+0xe6>
		else
			DDRB&=~(0x0f);
    1b10:	a7 e3       	ldi	r26, 0x37	; 55
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	e7 e3       	ldi	r30, 0x37	; 55
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	80 7f       	andi	r24, 0xF0	; 240
    1b1c:	8c 93       	st	X, r24
    1b1e:	25 c0       	rjmp	.+74     	; 0x1b6a <DIO_write_low_nibbleDir+0xe6>
		break;
	case 'C':
		if(direction==1)
    1b20:	8a 81       	ldd	r24, Y+2	; 0x02
    1b22:	81 30       	cpi	r24, 0x01	; 1
    1b24:	41 f4       	brne	.+16     	; 0x1b36 <DIO_write_low_nibbleDir+0xb2>
			DDRC|=0x0f;
    1b26:	a4 e3       	ldi	r26, 0x34	; 52
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	e4 e3       	ldi	r30, 0x34	; 52
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	80 81       	ld	r24, Z
    1b30:	8f 60       	ori	r24, 0x0F	; 15
    1b32:	8c 93       	st	X, r24
    1b34:	1a c0       	rjmp	.+52     	; 0x1b6a <DIO_write_low_nibbleDir+0xe6>
		else
			DDRC&=~(0x0f);
    1b36:	a4 e3       	ldi	r26, 0x34	; 52
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	e4 e3       	ldi	r30, 0x34	; 52
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	80 7f       	andi	r24, 0xF0	; 240
    1b42:	8c 93       	st	X, r24
    1b44:	12 c0       	rjmp	.+36     	; 0x1b6a <DIO_write_low_nibbleDir+0xe6>
		break;
	case 'D':
		if(direction==1)
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	81 30       	cpi	r24, 0x01	; 1
    1b4a:	41 f4       	brne	.+16     	; 0x1b5c <DIO_write_low_nibbleDir+0xd8>
			DDRD|=0x0f;
    1b4c:	a1 e3       	ldi	r26, 0x31	; 49
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	e1 e3       	ldi	r30, 0x31	; 49
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	8f 60       	ori	r24, 0x0F	; 15
    1b58:	8c 93       	st	X, r24
    1b5a:	07 c0       	rjmp	.+14     	; 0x1b6a <DIO_write_low_nibbleDir+0xe6>
		else
			DDRD&=~(0x0f);
    1b5c:	a1 e3       	ldi	r26, 0x31	; 49
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	e1 e3       	ldi	r30, 0x31	; 49
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	80 7f       	andi	r24, 0xF0	; 240
    1b68:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	0f 90       	pop	r0
    1b72:	cf 91       	pop	r28
    1b74:	df 91       	pop	r29
    1b76:	08 95       	ret

00001b78 <LCD_refresh>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_refresh(void)
{
    1b78:	df 93       	push	r29
    1b7a:	cf 93       	push	r28
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62
    1b80:	aa 97       	sbiw	r28, 0x2a	; 42
    1b82:	0f b6       	in	r0, 0x3f	; 63
    1b84:	f8 94       	cli
    1b86:	de bf       	out	0x3e, r29	; 62
    1b88:	0f be       	out	0x3f, r0	; 63
    1b8a:	cd bf       	out	0x3d, r28	; 61
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	a0 e8       	ldi	r26, 0x80	; 128
    1b92:	bf e3       	ldi	r27, 0x3F	; 63
    1b94:	8f a3       	std	Y+39, r24	; 0x27
    1b96:	98 a7       	std	Y+40, r25	; 0x28
    1b98:	a9 a7       	std	Y+41, r26	; 0x29
    1b9a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b9c:	6f a1       	ldd	r22, Y+39	; 0x27
    1b9e:	78 a5       	ldd	r23, Y+40	; 0x28
    1ba0:	89 a5       	ldd	r24, Y+41	; 0x29
    1ba2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	4a e7       	ldi	r20, 0x7A	; 122
    1baa:	53 e4       	ldi	r21, 0x43	; 67
    1bac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	8b a3       	std	Y+35, r24	; 0x23
    1bb6:	9c a3       	std	Y+36, r25	; 0x24
    1bb8:	ad a3       	std	Y+37, r26	; 0x25
    1bba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bbc:	6b a1       	ldd	r22, Y+35	; 0x23
    1bbe:	7c a1       	ldd	r23, Y+36	; 0x24
    1bc0:	8d a1       	ldd	r24, Y+37	; 0x25
    1bc2:	9e a1       	ldd	r25, Y+38	; 0x26
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	40 e8       	ldi	r20, 0x80	; 128
    1bca:	5f e3       	ldi	r21, 0x3F	; 63
    1bcc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bd0:	88 23       	and	r24, r24
    1bd2:	2c f4       	brge	.+10     	; 0x1bde <LCD_refresh+0x66>
		__ticks = 1;
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	9a a3       	std	Y+34, r25	; 0x22
    1bda:	89 a3       	std	Y+33, r24	; 0x21
    1bdc:	3f c0       	rjmp	.+126    	; 0x1c5c <LCD_refresh+0xe4>
	else if (__tmp > 65535)
    1bde:	6b a1       	ldd	r22, Y+35	; 0x23
    1be0:	7c a1       	ldd	r23, Y+36	; 0x24
    1be2:	8d a1       	ldd	r24, Y+37	; 0x25
    1be4:	9e a1       	ldd	r25, Y+38	; 0x26
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	3f ef       	ldi	r19, 0xFF	; 255
    1bea:	4f e7       	ldi	r20, 0x7F	; 127
    1bec:	57 e4       	ldi	r21, 0x47	; 71
    1bee:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bf2:	18 16       	cp	r1, r24
    1bf4:	4c f5       	brge	.+82     	; 0x1c48 <LCD_refresh+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf6:	6f a1       	ldd	r22, Y+39	; 0x27
    1bf8:	78 a5       	ldd	r23, Y+40	; 0x28
    1bfa:	89 a5       	ldd	r24, Y+41	; 0x29
    1bfc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	40 e2       	ldi	r20, 0x20	; 32
    1c04:	51 e4       	ldi	r21, 0x41	; 65
    1c06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	bc 01       	movw	r22, r24
    1c10:	cd 01       	movw	r24, r26
    1c12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	9a a3       	std	Y+34, r25	; 0x22
    1c1c:	89 a3       	std	Y+33, r24	; 0x21
    1c1e:	0f c0       	rjmp	.+30     	; 0x1c3e <LCD_refresh+0xc6>
    1c20:	89 e1       	ldi	r24, 0x19	; 25
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	98 a3       	std	Y+32, r25	; 0x20
    1c26:	8f 8f       	std	Y+31, r24	; 0x1f
    1c28:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c2a:	98 a1       	ldd	r25, Y+32	; 0x20
    1c2c:	01 97       	sbiw	r24, 0x01	; 1
    1c2e:	f1 f7       	brne	.-4      	; 0x1c2c <LCD_refresh+0xb4>
    1c30:	98 a3       	std	Y+32, r25	; 0x20
    1c32:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c34:	89 a1       	ldd	r24, Y+33	; 0x21
    1c36:	9a a1       	ldd	r25, Y+34	; 0x22
    1c38:	01 97       	sbiw	r24, 0x01	; 1
    1c3a:	9a a3       	std	Y+34, r25	; 0x22
    1c3c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c3e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c40:	9a a1       	ldd	r25, Y+34	; 0x22
    1c42:	00 97       	sbiw	r24, 0x00	; 0
    1c44:	69 f7       	brne	.-38     	; 0x1c20 <LCD_refresh+0xa8>
    1c46:	14 c0       	rjmp	.+40     	; 0x1c70 <LCD_refresh+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c48:	6b a1       	ldd	r22, Y+35	; 0x23
    1c4a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c4c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c4e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	9a a3       	std	Y+34, r25	; 0x22
    1c5a:	89 a3       	std	Y+33, r24	; 0x21
    1c5c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c5e:	9a a1       	ldd	r25, Y+34	; 0x22
    1c60:	9e 8f       	std	Y+30, r25	; 0x1e
    1c62:	8d 8f       	std	Y+29, r24	; 0x1d
    1c64:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c66:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	f1 f7       	brne	.-4      	; 0x1c68 <LCD_refresh+0xf0>
    1c6c:	9e 8f       	std	Y+30, r25	; 0x1e
    1c6e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,0);
    1c70:	83 e4       	ldi	r24, 0x43	; 67
    1c72:	62 e0       	ldi	r22, 0x02	; 2
    1c74:	40 e0       	ldi	r20, 0x00	; 0
    1c76:	0e 94 12 07 	call	0xe24	; 0xe24 <DIO_write_PIN>
    1c7a:	80 e0       	ldi	r24, 0x00	; 0
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	a0 e8       	ldi	r26, 0x80	; 128
    1c80:	bf e3       	ldi	r27, 0x3F	; 63
    1c82:	89 8f       	std	Y+25, r24	; 0x19
    1c84:	9a 8f       	std	Y+26, r25	; 0x1a
    1c86:	ab 8f       	std	Y+27, r26	; 0x1b
    1c88:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c8a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	4a e7       	ldi	r20, 0x7A	; 122
    1c98:	53 e4       	ldi	r21, 0x43	; 67
    1c9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	8d 8b       	std	Y+21, r24	; 0x15
    1ca4:	9e 8b       	std	Y+22, r25	; 0x16
    1ca6:	af 8b       	std	Y+23, r26	; 0x17
    1ca8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1caa:	6d 89       	ldd	r22, Y+21	; 0x15
    1cac:	7e 89       	ldd	r23, Y+22	; 0x16
    1cae:	8f 89       	ldd	r24, Y+23	; 0x17
    1cb0:	98 8d       	ldd	r25, Y+24	; 0x18
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	40 e8       	ldi	r20, 0x80	; 128
    1cb8:	5f e3       	ldi	r21, 0x3F	; 63
    1cba:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cbe:	88 23       	and	r24, r24
    1cc0:	2c f4       	brge	.+10     	; 0x1ccc <LCD_refresh+0x154>
		__ticks = 1;
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	9c 8b       	std	Y+20, r25	; 0x14
    1cc8:	8b 8b       	std	Y+19, r24	; 0x13
    1cca:	3f c0       	rjmp	.+126    	; 0x1d4a <LCD_refresh+0x1d2>
	else if (__tmp > 65535)
    1ccc:	6d 89       	ldd	r22, Y+21	; 0x15
    1cce:	7e 89       	ldd	r23, Y+22	; 0x16
    1cd0:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd2:	98 8d       	ldd	r25, Y+24	; 0x18
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	3f ef       	ldi	r19, 0xFF	; 255
    1cd8:	4f e7       	ldi	r20, 0x7F	; 127
    1cda:	57 e4       	ldi	r21, 0x47	; 71
    1cdc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ce0:	18 16       	cp	r1, r24
    1ce2:	4c f5       	brge	.+82     	; 0x1d36 <LCD_refresh+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce4:	69 8d       	ldd	r22, Y+25	; 0x19
    1ce6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ce8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	40 e2       	ldi	r20, 0x20	; 32
    1cf2:	51 e4       	ldi	r21, 0x41	; 65
    1cf4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	bc 01       	movw	r22, r24
    1cfe:	cd 01       	movw	r24, r26
    1d00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d04:	dc 01       	movw	r26, r24
    1d06:	cb 01       	movw	r24, r22
    1d08:	9c 8b       	std	Y+20, r25	; 0x14
    1d0a:	8b 8b       	std	Y+19, r24	; 0x13
    1d0c:	0f c0       	rjmp	.+30     	; 0x1d2c <LCD_refresh+0x1b4>
    1d0e:	89 e1       	ldi	r24, 0x19	; 25
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	9a 8b       	std	Y+18, r25	; 0x12
    1d14:	89 8b       	std	Y+17, r24	; 0x11
    1d16:	89 89       	ldd	r24, Y+17	; 0x11
    1d18:	9a 89       	ldd	r25, Y+18	; 0x12
    1d1a:	01 97       	sbiw	r24, 0x01	; 1
    1d1c:	f1 f7       	brne	.-4      	; 0x1d1a <LCD_refresh+0x1a2>
    1d1e:	9a 8b       	std	Y+18, r25	; 0x12
    1d20:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d22:	8b 89       	ldd	r24, Y+19	; 0x13
    1d24:	9c 89       	ldd	r25, Y+20	; 0x14
    1d26:	01 97       	sbiw	r24, 0x01	; 1
    1d28:	9c 8b       	std	Y+20, r25	; 0x14
    1d2a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d2e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d30:	00 97       	sbiw	r24, 0x00	; 0
    1d32:	69 f7       	brne	.-38     	; 0x1d0e <LCD_refresh+0x196>
    1d34:	14 c0       	rjmp	.+40     	; 0x1d5e <LCD_refresh+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d36:	6d 89       	ldd	r22, Y+21	; 0x15
    1d38:	7e 89       	ldd	r23, Y+22	; 0x16
    1d3a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d3c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d42:	dc 01       	movw	r26, r24
    1d44:	cb 01       	movw	r24, r22
    1d46:	9c 8b       	std	Y+20, r25	; 0x14
    1d48:	8b 8b       	std	Y+19, r24	; 0x13
    1d4a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d4c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d4e:	98 8b       	std	Y+16, r25	; 0x10
    1d50:	8f 87       	std	Y+15, r24	; 0x0f
    1d52:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d54:	98 89       	ldd	r25, Y+16	; 0x10
    1d56:	01 97       	sbiw	r24, 0x01	; 1
    1d58:	f1 f7       	brne	.-4      	; 0x1d56 <LCD_refresh+0x1de>
    1d5a:	98 8b       	std	Y+16, r25	; 0x10
    1d5c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,1);
    1d5e:	83 e4       	ldi	r24, 0x43	; 67
    1d60:	62 e0       	ldi	r22, 0x02	; 2
    1d62:	41 e0       	ldi	r20, 0x01	; 1
    1d64:	0e 94 12 07 	call	0xe24	; 0xe24 <DIO_write_PIN>
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	a0 e8       	ldi	r26, 0x80	; 128
    1d6e:	bf e3       	ldi	r27, 0x3F	; 63
    1d70:	8b 87       	std	Y+11, r24	; 0x0b
    1d72:	9c 87       	std	Y+12, r25	; 0x0c
    1d74:	ad 87       	std	Y+13, r26	; 0x0d
    1d76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	4a e7       	ldi	r20, 0x7A	; 122
    1d86:	53 e4       	ldi	r21, 0x43	; 67
    1d88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	8f 83       	std	Y+7, r24	; 0x07
    1d92:	98 87       	std	Y+8, r25	; 0x08
    1d94:	a9 87       	std	Y+9, r26	; 0x09
    1d96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d98:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9a:	78 85       	ldd	r23, Y+8	; 0x08
    1d9c:	89 85       	ldd	r24, Y+9	; 0x09
    1d9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	40 e8       	ldi	r20, 0x80	; 128
    1da6:	5f e3       	ldi	r21, 0x3F	; 63
    1da8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dac:	88 23       	and	r24, r24
    1dae:	2c f4       	brge	.+10     	; 0x1dba <LCD_refresh+0x242>
		__ticks = 1;
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	9e 83       	std	Y+6, r25	; 0x06
    1db6:	8d 83       	std	Y+5, r24	; 0x05
    1db8:	3f c0       	rjmp	.+126    	; 0x1e38 <LCD_refresh+0x2c0>
	else if (__tmp > 65535)
    1dba:	6f 81       	ldd	r22, Y+7	; 0x07
    1dbc:	78 85       	ldd	r23, Y+8	; 0x08
    1dbe:	89 85       	ldd	r24, Y+9	; 0x09
    1dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	3f ef       	ldi	r19, 0xFF	; 255
    1dc6:	4f e7       	ldi	r20, 0x7F	; 127
    1dc8:	57 e4       	ldi	r21, 0x47	; 71
    1dca:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1dce:	18 16       	cp	r1, r24
    1dd0:	4c f5       	brge	.+82     	; 0x1e24 <LCD_refresh+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	40 e2       	ldi	r20, 0x20	; 32
    1de0:	51 e4       	ldi	r21, 0x41	; 65
    1de2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	bc 01       	movw	r22, r24
    1dec:	cd 01       	movw	r24, r26
    1dee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	9e 83       	std	Y+6, r25	; 0x06
    1df8:	8d 83       	std	Y+5, r24	; 0x05
    1dfa:	0f c0       	rjmp	.+30     	; 0x1e1a <LCD_refresh+0x2a2>
    1dfc:	89 e1       	ldi	r24, 0x19	; 25
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	9c 83       	std	Y+4, r25	; 0x04
    1e02:	8b 83       	std	Y+3, r24	; 0x03
    1e04:	8b 81       	ldd	r24, Y+3	; 0x03
    1e06:	9c 81       	ldd	r25, Y+4	; 0x04
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	f1 f7       	brne	.-4      	; 0x1e08 <LCD_refresh+0x290>
    1e0c:	9c 83       	std	Y+4, r25	; 0x04
    1e0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e10:	8d 81       	ldd	r24, Y+5	; 0x05
    1e12:	9e 81       	ldd	r25, Y+6	; 0x06
    1e14:	01 97       	sbiw	r24, 0x01	; 1
    1e16:	9e 83       	std	Y+6, r25	; 0x06
    1e18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	69 f7       	brne	.-38     	; 0x1dfc <LCD_refresh+0x284>
    1e22:	14 c0       	rjmp	.+40     	; 0x1e4c <LCD_refresh+0x2d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e24:	6f 81       	ldd	r22, Y+7	; 0x07
    1e26:	78 85       	ldd	r23, Y+8	; 0x08
    1e28:	89 85       	ldd	r24, Y+9	; 0x09
    1e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	9e 83       	std	Y+6, r25	; 0x06
    1e36:	8d 83       	std	Y+5, r24	; 0x05
    1e38:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3c:	9a 83       	std	Y+2, r25	; 0x02
    1e3e:	89 83       	std	Y+1, r24	; 0x01
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	9a 81       	ldd	r25, Y+2	; 0x02
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	f1 f7       	brne	.-4      	; 0x1e44 <LCD_refresh+0x2cc>
    1e48:	9a 83       	std	Y+2, r25	; 0x02
    1e4a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1e4c:	aa 96       	adiw	r28, 0x2a	; 42
    1e4e:	0f b6       	in	r0, 0x3f	; 63
    1e50:	f8 94       	cli
    1e52:	de bf       	out	0x3e, r29	; 62
    1e54:	0f be       	out	0x3f, r0	; 63
    1e56:	cd bf       	out	0x3d, r28	; 61
    1e58:	cf 91       	pop	r28
    1e5a:	df 91       	pop	r29
    1e5c:	08 95       	ret

00001e5e <LCD_Command>:
void LCD_Command(uint8 cmd)
{
    1e5e:	df 93       	push	r29
    1e60:	cf 93       	push	r28
    1e62:	cd b7       	in	r28, 0x3d	; 61
    1e64:	de b7       	in	r29, 0x3e	; 62
    1e66:	e9 97       	sbiw	r28, 0x39	; 57
    1e68:	0f b6       	in	r0, 0x3f	; 63
    1e6a:	f8 94       	cli
    1e6c:	de bf       	out	0x3e, r29	; 62
    1e6e:	0f be       	out	0x3f, r0	; 63
    1e70:	cd bf       	out	0x3d, r28	; 61
    1e72:	89 af       	std	Y+57, r24	; 0x39
	DIO_write_PIN(LCD_ctrl_port,RS,0);
    1e74:	83 e4       	ldi	r24, 0x43	; 67
    1e76:	60 e0       	ldi	r22, 0x00	; 0
    1e78:	40 e0       	ldi	r20, 0x00	; 0
    1e7a:	0e 94 12 07 	call	0xe24	; 0xe24 <DIO_write_PIN>
    1e7e:	80 e0       	ldi	r24, 0x00	; 0
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	a0 e8       	ldi	r26, 0x80	; 128
    1e84:	bf e3       	ldi	r27, 0x3F	; 63
    1e86:	8d ab       	std	Y+53, r24	; 0x35
    1e88:	9e ab       	std	Y+54, r25	; 0x36
    1e8a:	af ab       	std	Y+55, r26	; 0x37
    1e8c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e8e:	6d a9       	ldd	r22, Y+53	; 0x35
    1e90:	7e a9       	ldd	r23, Y+54	; 0x36
    1e92:	8f a9       	ldd	r24, Y+55	; 0x37
    1e94:	98 ad       	ldd	r25, Y+56	; 0x38
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	4a e7       	ldi	r20, 0x7A	; 122
    1e9c:	53 e4       	ldi	r21, 0x43	; 67
    1e9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	89 ab       	std	Y+49, r24	; 0x31
    1ea8:	9a ab       	std	Y+50, r25	; 0x32
    1eaa:	ab ab       	std	Y+51, r26	; 0x33
    1eac:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1eae:	69 a9       	ldd	r22, Y+49	; 0x31
    1eb0:	7a a9       	ldd	r23, Y+50	; 0x32
    1eb2:	8b a9       	ldd	r24, Y+51	; 0x33
    1eb4:	9c a9       	ldd	r25, Y+52	; 0x34
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	40 e8       	ldi	r20, 0x80	; 128
    1ebc:	5f e3       	ldi	r21, 0x3F	; 63
    1ebe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ec2:	88 23       	and	r24, r24
    1ec4:	2c f4       	brge	.+10     	; 0x1ed0 <LCD_Command+0x72>
		__ticks = 1;
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	98 ab       	std	Y+48, r25	; 0x30
    1ecc:	8f a7       	std	Y+47, r24	; 0x2f
    1ece:	3f c0       	rjmp	.+126    	; 0x1f4e <LCD_Command+0xf0>
	else if (__tmp > 65535)
    1ed0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ed2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ed4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ed6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	3f ef       	ldi	r19, 0xFF	; 255
    1edc:	4f e7       	ldi	r20, 0x7F	; 127
    1ede:	57 e4       	ldi	r21, 0x47	; 71
    1ee0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ee4:	18 16       	cp	r1, r24
    1ee6:	4c f5       	brge	.+82     	; 0x1f3a <LCD_Command+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee8:	6d a9       	ldd	r22, Y+53	; 0x35
    1eea:	7e a9       	ldd	r23, Y+54	; 0x36
    1eec:	8f a9       	ldd	r24, Y+55	; 0x37
    1eee:	98 ad       	ldd	r25, Y+56	; 0x38
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	40 e2       	ldi	r20, 0x20	; 32
    1ef6:	51 e4       	ldi	r21, 0x41	; 65
    1ef8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1efc:	dc 01       	movw	r26, r24
    1efe:	cb 01       	movw	r24, r22
    1f00:	bc 01       	movw	r22, r24
    1f02:	cd 01       	movw	r24, r26
    1f04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	98 ab       	std	Y+48, r25	; 0x30
    1f0e:	8f a7       	std	Y+47, r24	; 0x2f
    1f10:	0f c0       	rjmp	.+30     	; 0x1f30 <LCD_Command+0xd2>
    1f12:	89 e1       	ldi	r24, 0x19	; 25
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	9e a7       	std	Y+46, r25	; 0x2e
    1f18:	8d a7       	std	Y+45, r24	; 0x2d
    1f1a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f1c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f1e:	01 97       	sbiw	r24, 0x01	; 1
    1f20:	f1 f7       	brne	.-4      	; 0x1f1e <LCD_Command+0xc0>
    1f22:	9e a7       	std	Y+46, r25	; 0x2e
    1f24:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f26:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f28:	98 a9       	ldd	r25, Y+48	; 0x30
    1f2a:	01 97       	sbiw	r24, 0x01	; 1
    1f2c:	98 ab       	std	Y+48, r25	; 0x30
    1f2e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f30:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f32:	98 a9       	ldd	r25, Y+48	; 0x30
    1f34:	00 97       	sbiw	r24, 0x00	; 0
    1f36:	69 f7       	brne	.-38     	; 0x1f12 <LCD_Command+0xb4>
    1f38:	14 c0       	rjmp	.+40     	; 0x1f62 <LCD_Command+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f3a:	69 a9       	ldd	r22, Y+49	; 0x31
    1f3c:	7a a9       	ldd	r23, Y+50	; 0x32
    1f3e:	8b a9       	ldd	r24, Y+51	; 0x33
    1f40:	9c a9       	ldd	r25, Y+52	; 0x34
    1f42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f46:	dc 01       	movw	r26, r24
    1f48:	cb 01       	movw	r24, r22
    1f4a:	98 ab       	std	Y+48, r25	; 0x30
    1f4c:	8f a7       	std	Y+47, r24	; 0x2f
    1f4e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f50:	98 a9       	ldd	r25, Y+48	; 0x30
    1f52:	9c a7       	std	Y+44, r25	; 0x2c
    1f54:	8b a7       	std	Y+43, r24	; 0x2b
    1f56:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f58:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f5a:	01 97       	sbiw	r24, 0x01	; 1
    1f5c:	f1 f7       	brne	.-4      	; 0x1f5a <LCD_Command+0xfc>
    1f5e:	9c a7       	std	Y+44, r25	; 0x2c
    1f60:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,1);
    1f62:	83 e4       	ldi	r24, 0x43	; 67
    1f64:	62 e0       	ldi	r22, 0x02	; 2
    1f66:	41 e0       	ldi	r20, 0x01	; 1
    1f68:	0e 94 12 07 	call	0xe24	; 0xe24 <DIO_write_PIN>
    1f6c:	80 e0       	ldi	r24, 0x00	; 0
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	a0 e8       	ldi	r26, 0x80	; 128
    1f72:	bf e3       	ldi	r27, 0x3F	; 63
    1f74:	8f a3       	std	Y+39, r24	; 0x27
    1f76:	98 a7       	std	Y+40, r25	; 0x28
    1f78:	a9 a7       	std	Y+41, r26	; 0x29
    1f7a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f7c:	6f a1       	ldd	r22, Y+39	; 0x27
    1f7e:	78 a5       	ldd	r23, Y+40	; 0x28
    1f80:	89 a5       	ldd	r24, Y+41	; 0x29
    1f82:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	4a e7       	ldi	r20, 0x7A	; 122
    1f8a:	53 e4       	ldi	r21, 0x43	; 67
    1f8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	8b a3       	std	Y+35, r24	; 0x23
    1f96:	9c a3       	std	Y+36, r25	; 0x24
    1f98:	ad a3       	std	Y+37, r26	; 0x25
    1f9a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f9c:	6b a1       	ldd	r22, Y+35	; 0x23
    1f9e:	7c a1       	ldd	r23, Y+36	; 0x24
    1fa0:	8d a1       	ldd	r24, Y+37	; 0x25
    1fa2:	9e a1       	ldd	r25, Y+38	; 0x26
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	40 e8       	ldi	r20, 0x80	; 128
    1faa:	5f e3       	ldi	r21, 0x3F	; 63
    1fac:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fb0:	88 23       	and	r24, r24
    1fb2:	2c f4       	brge	.+10     	; 0x1fbe <LCD_Command+0x160>
		__ticks = 1;
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	9a a3       	std	Y+34, r25	; 0x22
    1fba:	89 a3       	std	Y+33, r24	; 0x21
    1fbc:	3f c0       	rjmp	.+126    	; 0x203c <LCD_Command+0x1de>
	else if (__tmp > 65535)
    1fbe:	6b a1       	ldd	r22, Y+35	; 0x23
    1fc0:	7c a1       	ldd	r23, Y+36	; 0x24
    1fc2:	8d a1       	ldd	r24, Y+37	; 0x25
    1fc4:	9e a1       	ldd	r25, Y+38	; 0x26
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	3f ef       	ldi	r19, 0xFF	; 255
    1fca:	4f e7       	ldi	r20, 0x7F	; 127
    1fcc:	57 e4       	ldi	r21, 0x47	; 71
    1fce:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fd2:	18 16       	cp	r1, r24
    1fd4:	4c f5       	brge	.+82     	; 0x2028 <LCD_Command+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd6:	6f a1       	ldd	r22, Y+39	; 0x27
    1fd8:	78 a5       	ldd	r23, Y+40	; 0x28
    1fda:	89 a5       	ldd	r24, Y+41	; 0x29
    1fdc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	40 e2       	ldi	r20, 0x20	; 32
    1fe4:	51 e4       	ldi	r21, 0x41	; 65
    1fe6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	bc 01       	movw	r22, r24
    1ff0:	cd 01       	movw	r24, r26
    1ff2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	9a a3       	std	Y+34, r25	; 0x22
    1ffc:	89 a3       	std	Y+33, r24	; 0x21
    1ffe:	0f c0       	rjmp	.+30     	; 0x201e <LCD_Command+0x1c0>
    2000:	89 e1       	ldi	r24, 0x19	; 25
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	98 a3       	std	Y+32, r25	; 0x20
    2006:	8f 8f       	std	Y+31, r24	; 0x1f
    2008:	8f 8d       	ldd	r24, Y+31	; 0x1f
    200a:	98 a1       	ldd	r25, Y+32	; 0x20
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	f1 f7       	brne	.-4      	; 0x200c <LCD_Command+0x1ae>
    2010:	98 a3       	std	Y+32, r25	; 0x20
    2012:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2014:	89 a1       	ldd	r24, Y+33	; 0x21
    2016:	9a a1       	ldd	r25, Y+34	; 0x22
    2018:	01 97       	sbiw	r24, 0x01	; 1
    201a:	9a a3       	std	Y+34, r25	; 0x22
    201c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    201e:	89 a1       	ldd	r24, Y+33	; 0x21
    2020:	9a a1       	ldd	r25, Y+34	; 0x22
    2022:	00 97       	sbiw	r24, 0x00	; 0
    2024:	69 f7       	brne	.-38     	; 0x2000 <LCD_Command+0x1a2>
    2026:	14 c0       	rjmp	.+40     	; 0x2050 <LCD_Command+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2028:	6b a1       	ldd	r22, Y+35	; 0x23
    202a:	7c a1       	ldd	r23, Y+36	; 0x24
    202c:	8d a1       	ldd	r24, Y+37	; 0x25
    202e:	9e a1       	ldd	r25, Y+38	; 0x26
    2030:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	9a a3       	std	Y+34, r25	; 0x22
    203a:	89 a3       	std	Y+33, r24	; 0x21
    203c:	89 a1       	ldd	r24, Y+33	; 0x21
    203e:	9a a1       	ldd	r25, Y+34	; 0x22
    2040:	9e 8f       	std	Y+30, r25	; 0x1e
    2042:	8d 8f       	std	Y+29, r24	; 0x1d
    2044:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2046:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2048:	01 97       	sbiw	r24, 0x01	; 1
    204a:	f1 f7       	brne	.-4      	; 0x2048 <LCD_Command+0x1ea>
    204c:	9e 8f       	std	Y+30, r25	; 0x1e
    204e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_write_high_nibble('D',cmd>>4);
    2050:	89 ad       	ldd	r24, Y+57	; 0x39
    2052:	98 2f       	mov	r25, r24
    2054:	92 95       	swap	r25
    2056:	9f 70       	andi	r25, 0x0F	; 15
    2058:	84 e4       	ldi	r24, 0x44	; 68
    205a:	69 2f       	mov	r22, r25
    205c:	0e 94 56 0c 	call	0x18ac	; 0x18ac <DIO_write_high_nibble>
	LCD_refresh();
    2060:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <LCD_refresh>
	DIO_write_high_nibble('D',cmd);
    2064:	84 e4       	ldi	r24, 0x44	; 68
    2066:	69 ad       	ldd	r22, Y+57	; 0x39
    2068:	0e 94 56 0c 	call	0x18ac	; 0x18ac <DIO_write_high_nibble>
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	a0 e8       	ldi	r26, 0x80	; 128
    2072:	bf e3       	ldi	r27, 0x3F	; 63
    2074:	89 8f       	std	Y+25, r24	; 0x19
    2076:	9a 8f       	std	Y+26, r25	; 0x1a
    2078:	ab 8f       	std	Y+27, r26	; 0x1b
    207a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207c:	69 8d       	ldd	r22, Y+25	; 0x19
    207e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2080:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2082:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	4a e7       	ldi	r20, 0x7A	; 122
    208a:	53 e4       	ldi	r21, 0x43	; 67
    208c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	8d 8b       	std	Y+21, r24	; 0x15
    2096:	9e 8b       	std	Y+22, r25	; 0x16
    2098:	af 8b       	std	Y+23, r26	; 0x17
    209a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    209c:	6d 89       	ldd	r22, Y+21	; 0x15
    209e:	7e 89       	ldd	r23, Y+22	; 0x16
    20a0:	8f 89       	ldd	r24, Y+23	; 0x17
    20a2:	98 8d       	ldd	r25, Y+24	; 0x18
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	40 e8       	ldi	r20, 0x80	; 128
    20aa:	5f e3       	ldi	r21, 0x3F	; 63
    20ac:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20b0:	88 23       	and	r24, r24
    20b2:	2c f4       	brge	.+10     	; 0x20be <LCD_Command+0x260>
		__ticks = 1;
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	9c 8b       	std	Y+20, r25	; 0x14
    20ba:	8b 8b       	std	Y+19, r24	; 0x13
    20bc:	3f c0       	rjmp	.+126    	; 0x213c <LCD_Command+0x2de>
	else if (__tmp > 65535)
    20be:	6d 89       	ldd	r22, Y+21	; 0x15
    20c0:	7e 89       	ldd	r23, Y+22	; 0x16
    20c2:	8f 89       	ldd	r24, Y+23	; 0x17
    20c4:	98 8d       	ldd	r25, Y+24	; 0x18
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	3f ef       	ldi	r19, 0xFF	; 255
    20ca:	4f e7       	ldi	r20, 0x7F	; 127
    20cc:	57 e4       	ldi	r21, 0x47	; 71
    20ce:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20d2:	18 16       	cp	r1, r24
    20d4:	4c f5       	brge	.+82     	; 0x2128 <LCD_Command+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d6:	69 8d       	ldd	r22, Y+25	; 0x19
    20d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	40 e2       	ldi	r20, 0x20	; 32
    20e4:	51 e4       	ldi	r21, 0x41	; 65
    20e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	bc 01       	movw	r22, r24
    20f0:	cd 01       	movw	r24, r26
    20f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	9c 8b       	std	Y+20, r25	; 0x14
    20fc:	8b 8b       	std	Y+19, r24	; 0x13
    20fe:	0f c0       	rjmp	.+30     	; 0x211e <LCD_Command+0x2c0>
    2100:	89 e1       	ldi	r24, 0x19	; 25
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	9a 8b       	std	Y+18, r25	; 0x12
    2106:	89 8b       	std	Y+17, r24	; 0x11
    2108:	89 89       	ldd	r24, Y+17	; 0x11
    210a:	9a 89       	ldd	r25, Y+18	; 0x12
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	f1 f7       	brne	.-4      	; 0x210c <LCD_Command+0x2ae>
    2110:	9a 8b       	std	Y+18, r25	; 0x12
    2112:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2114:	8b 89       	ldd	r24, Y+19	; 0x13
    2116:	9c 89       	ldd	r25, Y+20	; 0x14
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	9c 8b       	std	Y+20, r25	; 0x14
    211c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211e:	8b 89       	ldd	r24, Y+19	; 0x13
    2120:	9c 89       	ldd	r25, Y+20	; 0x14
    2122:	00 97       	sbiw	r24, 0x00	; 0
    2124:	69 f7       	brne	.-38     	; 0x2100 <LCD_Command+0x2a2>
    2126:	14 c0       	rjmp	.+40     	; 0x2150 <LCD_Command+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2128:	6d 89       	ldd	r22, Y+21	; 0x15
    212a:	7e 89       	ldd	r23, Y+22	; 0x16
    212c:	8f 89       	ldd	r24, Y+23	; 0x17
    212e:	98 8d       	ldd	r25, Y+24	; 0x18
    2130:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	9c 8b       	std	Y+20, r25	; 0x14
    213a:	8b 8b       	std	Y+19, r24	; 0x13
    213c:	8b 89       	ldd	r24, Y+19	; 0x13
    213e:	9c 89       	ldd	r25, Y+20	; 0x14
    2140:	98 8b       	std	Y+16, r25	; 0x10
    2142:	8f 87       	std	Y+15, r24	; 0x0f
    2144:	8f 85       	ldd	r24, Y+15	; 0x0f
    2146:	98 89       	ldd	r25, Y+16	; 0x10
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	f1 f7       	brne	.-4      	; 0x2148 <LCD_Command+0x2ea>
    214c:	98 8b       	std	Y+16, r25	; 0x10
    214e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,0);
    2150:	83 e4       	ldi	r24, 0x43	; 67
    2152:	62 e0       	ldi	r22, 0x02	; 2
    2154:	40 e0       	ldi	r20, 0x00	; 0
    2156:	0e 94 12 07 	call	0xe24	; 0xe24 <DIO_write_PIN>
    215a:	80 e0       	ldi	r24, 0x00	; 0
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	a0 e8       	ldi	r26, 0x80	; 128
    2160:	bf e3       	ldi	r27, 0x3F	; 63
    2162:	8b 87       	std	Y+11, r24	; 0x0b
    2164:	9c 87       	std	Y+12, r25	; 0x0c
    2166:	ad 87       	std	Y+13, r26	; 0x0d
    2168:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    216a:	6b 85       	ldd	r22, Y+11	; 0x0b
    216c:	7c 85       	ldd	r23, Y+12	; 0x0c
    216e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2170:	9e 85       	ldd	r25, Y+14	; 0x0e
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	4a e7       	ldi	r20, 0x7A	; 122
    2178:	53 e4       	ldi	r21, 0x43	; 67
    217a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    217e:	dc 01       	movw	r26, r24
    2180:	cb 01       	movw	r24, r22
    2182:	8f 83       	std	Y+7, r24	; 0x07
    2184:	98 87       	std	Y+8, r25	; 0x08
    2186:	a9 87       	std	Y+9, r26	; 0x09
    2188:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    218a:	6f 81       	ldd	r22, Y+7	; 0x07
    218c:	78 85       	ldd	r23, Y+8	; 0x08
    218e:	89 85       	ldd	r24, Y+9	; 0x09
    2190:	9a 85       	ldd	r25, Y+10	; 0x0a
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	40 e8       	ldi	r20, 0x80	; 128
    2198:	5f e3       	ldi	r21, 0x3F	; 63
    219a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    219e:	88 23       	and	r24, r24
    21a0:	2c f4       	brge	.+10     	; 0x21ac <LCD_Command+0x34e>
		__ticks = 1;
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	9e 83       	std	Y+6, r25	; 0x06
    21a8:	8d 83       	std	Y+5, r24	; 0x05
    21aa:	3f c0       	rjmp	.+126    	; 0x222a <LCD_Command+0x3cc>
	else if (__tmp > 65535)
    21ac:	6f 81       	ldd	r22, Y+7	; 0x07
    21ae:	78 85       	ldd	r23, Y+8	; 0x08
    21b0:	89 85       	ldd	r24, Y+9	; 0x09
    21b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	3f ef       	ldi	r19, 0xFF	; 255
    21b8:	4f e7       	ldi	r20, 0x7F	; 127
    21ba:	57 e4       	ldi	r21, 0x47	; 71
    21bc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21c0:	18 16       	cp	r1, r24
    21c2:	4c f5       	brge	.+82     	; 0x2216 <LCD_Command+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	40 e2       	ldi	r20, 0x20	; 32
    21d2:	51 e4       	ldi	r21, 0x41	; 65
    21d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21d8:	dc 01       	movw	r26, r24
    21da:	cb 01       	movw	r24, r22
    21dc:	bc 01       	movw	r22, r24
    21de:	cd 01       	movw	r24, r26
    21e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	9e 83       	std	Y+6, r25	; 0x06
    21ea:	8d 83       	std	Y+5, r24	; 0x05
    21ec:	0f c0       	rjmp	.+30     	; 0x220c <LCD_Command+0x3ae>
    21ee:	89 e1       	ldi	r24, 0x19	; 25
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	9c 83       	std	Y+4, r25	; 0x04
    21f4:	8b 83       	std	Y+3, r24	; 0x03
    21f6:	8b 81       	ldd	r24, Y+3	; 0x03
    21f8:	9c 81       	ldd	r25, Y+4	; 0x04
    21fa:	01 97       	sbiw	r24, 0x01	; 1
    21fc:	f1 f7       	brne	.-4      	; 0x21fa <LCD_Command+0x39c>
    21fe:	9c 83       	std	Y+4, r25	; 0x04
    2200:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2202:	8d 81       	ldd	r24, Y+5	; 0x05
    2204:	9e 81       	ldd	r25, Y+6	; 0x06
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	9e 83       	std	Y+6, r25	; 0x06
    220a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    220c:	8d 81       	ldd	r24, Y+5	; 0x05
    220e:	9e 81       	ldd	r25, Y+6	; 0x06
    2210:	00 97       	sbiw	r24, 0x00	; 0
    2212:	69 f7       	brne	.-38     	; 0x21ee <LCD_Command+0x390>
    2214:	14 c0       	rjmp	.+40     	; 0x223e <LCD_Command+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2216:	6f 81       	ldd	r22, Y+7	; 0x07
    2218:	78 85       	ldd	r23, Y+8	; 0x08
    221a:	89 85       	ldd	r24, Y+9	; 0x09
    221c:	9a 85       	ldd	r25, Y+10	; 0x0a
    221e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	9e 83       	std	Y+6, r25	; 0x06
    2228:	8d 83       	std	Y+5, r24	; 0x05
    222a:	8d 81       	ldd	r24, Y+5	; 0x05
    222c:	9e 81       	ldd	r25, Y+6	; 0x06
    222e:	9a 83       	std	Y+2, r25	; 0x02
    2230:	89 83       	std	Y+1, r24	; 0x01
    2232:	89 81       	ldd	r24, Y+1	; 0x01
    2234:	9a 81       	ldd	r25, Y+2	; 0x02
    2236:	01 97       	sbiw	r24, 0x01	; 1
    2238:	f1 f7       	brne	.-4      	; 0x2236 <LCD_Command+0x3d8>
    223a:	9a 83       	std	Y+2, r25	; 0x02
    223c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    223e:	e9 96       	adiw	r28, 0x39	; 57
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	f8 94       	cli
    2244:	de bf       	out	0x3e, r29	; 62
    2246:	0f be       	out	0x3f, r0	; 63
    2248:	cd bf       	out	0x3d, r28	; 61
    224a:	cf 91       	pop	r28
    224c:	df 91       	pop	r29
    224e:	08 95       	ret

00002250 <LCD_init>:
void LCD_init(void)
{
    2250:	df 93       	push	r29
    2252:	cf 93       	push	r28
    2254:	cd b7       	in	r28, 0x3d	; 61
    2256:	de b7       	in	r29, 0x3e	; 62
    2258:	2e 97       	sbiw	r28, 0x0e	; 14
    225a:	0f b6       	in	r0, 0x3f	; 63
    225c:	f8 94       	cli
    225e:	de bf       	out	0x3e, r29	; 62
    2260:	0f be       	out	0x3f, r0	; 63
    2262:	cd bf       	out	0x3d, r28	; 61
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	a8 e4       	ldi	r26, 0x48	; 72
    226a:	b3 e4       	ldi	r27, 0x43	; 67
    226c:	8b 87       	std	Y+11, r24	; 0x0b
    226e:	9c 87       	std	Y+12, r25	; 0x0c
    2270:	ad 87       	std	Y+13, r26	; 0x0d
    2272:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2274:	6b 85       	ldd	r22, Y+11	; 0x0b
    2276:	7c 85       	ldd	r23, Y+12	; 0x0c
    2278:	8d 85       	ldd	r24, Y+13	; 0x0d
    227a:	9e 85       	ldd	r25, Y+14	; 0x0e
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	4a e7       	ldi	r20, 0x7A	; 122
    2282:	53 e4       	ldi	r21, 0x43	; 67
    2284:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	8f 83       	std	Y+7, r24	; 0x07
    228e:	98 87       	std	Y+8, r25	; 0x08
    2290:	a9 87       	std	Y+9, r26	; 0x09
    2292:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2294:	6f 81       	ldd	r22, Y+7	; 0x07
    2296:	78 85       	ldd	r23, Y+8	; 0x08
    2298:	89 85       	ldd	r24, Y+9	; 0x09
    229a:	9a 85       	ldd	r25, Y+10	; 0x0a
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	40 e8       	ldi	r20, 0x80	; 128
    22a2:	5f e3       	ldi	r21, 0x3F	; 63
    22a4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22a8:	88 23       	and	r24, r24
    22aa:	2c f4       	brge	.+10     	; 0x22b6 <LCD_init+0x66>
		__ticks = 1;
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	9e 83       	std	Y+6, r25	; 0x06
    22b2:	8d 83       	std	Y+5, r24	; 0x05
    22b4:	3f c0       	rjmp	.+126    	; 0x2334 <LCD_init+0xe4>
	else if (__tmp > 65535)
    22b6:	6f 81       	ldd	r22, Y+7	; 0x07
    22b8:	78 85       	ldd	r23, Y+8	; 0x08
    22ba:	89 85       	ldd	r24, Y+9	; 0x09
    22bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	3f ef       	ldi	r19, 0xFF	; 255
    22c2:	4f e7       	ldi	r20, 0x7F	; 127
    22c4:	57 e4       	ldi	r21, 0x47	; 71
    22c6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22ca:	18 16       	cp	r1, r24
    22cc:	4c f5       	brge	.+82     	; 0x2320 <LCD_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    22d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	40 e2       	ldi	r20, 0x20	; 32
    22dc:	51 e4       	ldi	r21, 0x41	; 65
    22de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	bc 01       	movw	r22, r24
    22e8:	cd 01       	movw	r24, r26
    22ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	9e 83       	std	Y+6, r25	; 0x06
    22f4:	8d 83       	std	Y+5, r24	; 0x05
    22f6:	0f c0       	rjmp	.+30     	; 0x2316 <LCD_init+0xc6>
    22f8:	89 e1       	ldi	r24, 0x19	; 25
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	9c 83       	std	Y+4, r25	; 0x04
    22fe:	8b 83       	std	Y+3, r24	; 0x03
    2300:	8b 81       	ldd	r24, Y+3	; 0x03
    2302:	9c 81       	ldd	r25, Y+4	; 0x04
    2304:	01 97       	sbiw	r24, 0x01	; 1
    2306:	f1 f7       	brne	.-4      	; 0x2304 <LCD_init+0xb4>
    2308:	9c 83       	std	Y+4, r25	; 0x04
    230a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    230c:	8d 81       	ldd	r24, Y+5	; 0x05
    230e:	9e 81       	ldd	r25, Y+6	; 0x06
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	9e 83       	std	Y+6, r25	; 0x06
    2314:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2316:	8d 81       	ldd	r24, Y+5	; 0x05
    2318:	9e 81       	ldd	r25, Y+6	; 0x06
    231a:	00 97       	sbiw	r24, 0x00	; 0
    231c:	69 f7       	brne	.-38     	; 0x22f8 <LCD_init+0xa8>
    231e:	14 c0       	rjmp	.+40     	; 0x2348 <LCD_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2320:	6f 81       	ldd	r22, Y+7	; 0x07
    2322:	78 85       	ldd	r23, Y+8	; 0x08
    2324:	89 85       	ldd	r24, Y+9	; 0x09
    2326:	9a 85       	ldd	r25, Y+10	; 0x0a
    2328:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	9e 83       	std	Y+6, r25	; 0x06
    2332:	8d 83       	std	Y+5, r24	; 0x05
    2334:	8d 81       	ldd	r24, Y+5	; 0x05
    2336:	9e 81       	ldd	r25, Y+6	; 0x06
    2338:	9a 83       	std	Y+2, r25	; 0x02
    233a:	89 83       	std	Y+1, r24	; 0x01
    233c:	89 81       	ldd	r24, Y+1	; 0x01
    233e:	9a 81       	ldd	r25, Y+2	; 0x02
    2340:	01 97       	sbiw	r24, 0x01	; 1
    2342:	f1 f7       	brne	.-4      	; 0x2340 <LCD_init+0xf0>
    2344:	9a 83       	std	Y+2, r25	; 0x02
    2346:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
	DIO_setPINDir(LCD_ctrl_port,RS,out);
    2348:	83 e4       	ldi	r24, 0x43	; 67
    234a:	60 e0       	ldi	r22, 0x00	; 0
    234c:	41 e0       	ldi	r20, 0x01	; 1
    234e:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_setPINDir>
	DIO_setPINDir(LCD_ctrl_port,RW,out);
    2352:	83 e4       	ldi	r24, 0x43	; 67
    2354:	61 e0       	ldi	r22, 0x01	; 1
    2356:	41 e0       	ldi	r20, 0x01	; 1
    2358:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_setPINDir>
	DIO_setPINDir(LCD_ctrl_port,EN,out);
    235c:	83 e4       	ldi	r24, 0x43	; 67
    235e:	62 e0       	ldi	r22, 0x02	; 2
    2360:	41 e0       	ldi	r20, 0x01	; 1
    2362:	0e 94 2e 06 	call	0xc5c	; 0xc5c <DIO_setPINDir>
	DIO_write_high_nibbleDir(LCD_data_port,out);
    2366:	84 e4       	ldi	r24, 0x44	; 68
    2368:	61 e0       	ldi	r22, 0x01	; 1
    236a:	0e 94 c8 0c 	call	0x1990	; 0x1990 <DIO_write_high_nibbleDir>
	LCD_Command(LCD_Cursor_reset);
    236e:	82 e0       	ldi	r24, 0x02	; 2
    2370:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <LCD_Command>
	LCD_Command(LCD_4bit_2line);
    2374:	88 e2       	ldi	r24, 0x28	; 40
    2376:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <LCD_Command>
	LCD_Command(LCD_displayOn_cursorOn);
    237a:	8e e0       	ldi	r24, 0x0E	; 14
    237c:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <LCD_Command>
	LCD_Command(LCD_clear_cmd);
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <LCD_Command>
}
    2386:	2e 96       	adiw	r28, 0x0e	; 14
    2388:	0f b6       	in	r0, 0x3f	; 63
    238a:	f8 94       	cli
    238c:	de bf       	out	0x3e, r29	; 62
    238e:	0f be       	out	0x3f, r0	; 63
    2390:	cd bf       	out	0x3d, r28	; 61
    2392:	cf 91       	pop	r28
    2394:	df 91       	pop	r29
    2396:	08 95       	ret

00002398 <LCD_displayChar>:

void LCD_displayChar(uint8 data)
{
    2398:	df 93       	push	r29
    239a:	cf 93       	push	r28
    239c:	cd b7       	in	r28, 0x3d	; 61
    239e:	de b7       	in	r29, 0x3e	; 62
    23a0:	e9 97       	sbiw	r28, 0x39	; 57
    23a2:	0f b6       	in	r0, 0x3f	; 63
    23a4:	f8 94       	cli
    23a6:	de bf       	out	0x3e, r29	; 62
    23a8:	0f be       	out	0x3f, r0	; 63
    23aa:	cd bf       	out	0x3d, r28	; 61
    23ac:	89 af       	std	Y+57, r24	; 0x39
	DIO_write_PIN(LCD_ctrl_port,RS,1);
    23ae:	83 e4       	ldi	r24, 0x43	; 67
    23b0:	60 e0       	ldi	r22, 0x00	; 0
    23b2:	41 e0       	ldi	r20, 0x01	; 1
    23b4:	0e 94 12 07 	call	0xe24	; 0xe24 <DIO_write_PIN>
    23b8:	80 e0       	ldi	r24, 0x00	; 0
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	a0 e8       	ldi	r26, 0x80	; 128
    23be:	bf e3       	ldi	r27, 0x3F	; 63
    23c0:	8d ab       	std	Y+53, r24	; 0x35
    23c2:	9e ab       	std	Y+54, r25	; 0x36
    23c4:	af ab       	std	Y+55, r26	; 0x37
    23c6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c8:	6d a9       	ldd	r22, Y+53	; 0x35
    23ca:	7e a9       	ldd	r23, Y+54	; 0x36
    23cc:	8f a9       	ldd	r24, Y+55	; 0x37
    23ce:	98 ad       	ldd	r25, Y+56	; 0x38
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	4a e7       	ldi	r20, 0x7A	; 122
    23d6:	53 e4       	ldi	r21, 0x43	; 67
    23d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	89 ab       	std	Y+49, r24	; 0x31
    23e2:	9a ab       	std	Y+50, r25	; 0x32
    23e4:	ab ab       	std	Y+51, r26	; 0x33
    23e6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23e8:	69 a9       	ldd	r22, Y+49	; 0x31
    23ea:	7a a9       	ldd	r23, Y+50	; 0x32
    23ec:	8b a9       	ldd	r24, Y+51	; 0x33
    23ee:	9c a9       	ldd	r25, Y+52	; 0x34
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	40 e8       	ldi	r20, 0x80	; 128
    23f6:	5f e3       	ldi	r21, 0x3F	; 63
    23f8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23fc:	88 23       	and	r24, r24
    23fe:	2c f4       	brge	.+10     	; 0x240a <LCD_displayChar+0x72>
		__ticks = 1;
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	98 ab       	std	Y+48, r25	; 0x30
    2406:	8f a7       	std	Y+47, r24	; 0x2f
    2408:	3f c0       	rjmp	.+126    	; 0x2488 <LCD_displayChar+0xf0>
	else if (__tmp > 65535)
    240a:	69 a9       	ldd	r22, Y+49	; 0x31
    240c:	7a a9       	ldd	r23, Y+50	; 0x32
    240e:	8b a9       	ldd	r24, Y+51	; 0x33
    2410:	9c a9       	ldd	r25, Y+52	; 0x34
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	3f ef       	ldi	r19, 0xFF	; 255
    2416:	4f e7       	ldi	r20, 0x7F	; 127
    2418:	57 e4       	ldi	r21, 0x47	; 71
    241a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    241e:	18 16       	cp	r1, r24
    2420:	4c f5       	brge	.+82     	; 0x2474 <LCD_displayChar+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2422:	6d a9       	ldd	r22, Y+53	; 0x35
    2424:	7e a9       	ldd	r23, Y+54	; 0x36
    2426:	8f a9       	ldd	r24, Y+55	; 0x37
    2428:	98 ad       	ldd	r25, Y+56	; 0x38
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	40 e2       	ldi	r20, 0x20	; 32
    2430:	51 e4       	ldi	r21, 0x41	; 65
    2432:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	bc 01       	movw	r22, r24
    243c:	cd 01       	movw	r24, r26
    243e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	98 ab       	std	Y+48, r25	; 0x30
    2448:	8f a7       	std	Y+47, r24	; 0x2f
    244a:	0f c0       	rjmp	.+30     	; 0x246a <LCD_displayChar+0xd2>
    244c:	89 e1       	ldi	r24, 0x19	; 25
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	9e a7       	std	Y+46, r25	; 0x2e
    2452:	8d a7       	std	Y+45, r24	; 0x2d
    2454:	8d a5       	ldd	r24, Y+45	; 0x2d
    2456:	9e a5       	ldd	r25, Y+46	; 0x2e
    2458:	01 97       	sbiw	r24, 0x01	; 1
    245a:	f1 f7       	brne	.-4      	; 0x2458 <LCD_displayChar+0xc0>
    245c:	9e a7       	std	Y+46, r25	; 0x2e
    245e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2460:	8f a5       	ldd	r24, Y+47	; 0x2f
    2462:	98 a9       	ldd	r25, Y+48	; 0x30
    2464:	01 97       	sbiw	r24, 0x01	; 1
    2466:	98 ab       	std	Y+48, r25	; 0x30
    2468:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    246a:	8f a5       	ldd	r24, Y+47	; 0x2f
    246c:	98 a9       	ldd	r25, Y+48	; 0x30
    246e:	00 97       	sbiw	r24, 0x00	; 0
    2470:	69 f7       	brne	.-38     	; 0x244c <LCD_displayChar+0xb4>
    2472:	14 c0       	rjmp	.+40     	; 0x249c <LCD_displayChar+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2474:	69 a9       	ldd	r22, Y+49	; 0x31
    2476:	7a a9       	ldd	r23, Y+50	; 0x32
    2478:	8b a9       	ldd	r24, Y+51	; 0x33
    247a:	9c a9       	ldd	r25, Y+52	; 0x34
    247c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	98 ab       	std	Y+48, r25	; 0x30
    2486:	8f a7       	std	Y+47, r24	; 0x2f
    2488:	8f a5       	ldd	r24, Y+47	; 0x2f
    248a:	98 a9       	ldd	r25, Y+48	; 0x30
    248c:	9c a7       	std	Y+44, r25	; 0x2c
    248e:	8b a7       	std	Y+43, r24	; 0x2b
    2490:	8b a5       	ldd	r24, Y+43	; 0x2b
    2492:	9c a5       	ldd	r25, Y+44	; 0x2c
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	f1 f7       	brne	.-4      	; 0x2494 <LCD_displayChar+0xfc>
    2498:	9c a7       	std	Y+44, r25	; 0x2c
    249a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,1);
    249c:	83 e4       	ldi	r24, 0x43	; 67
    249e:	62 e0       	ldi	r22, 0x02	; 2
    24a0:	41 e0       	ldi	r20, 0x01	; 1
    24a2:	0e 94 12 07 	call	0xe24	; 0xe24 <DIO_write_PIN>
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	a0 e8       	ldi	r26, 0x80	; 128
    24ac:	bf e3       	ldi	r27, 0x3F	; 63
    24ae:	8f a3       	std	Y+39, r24	; 0x27
    24b0:	98 a7       	std	Y+40, r25	; 0x28
    24b2:	a9 a7       	std	Y+41, r26	; 0x29
    24b4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b6:	6f a1       	ldd	r22, Y+39	; 0x27
    24b8:	78 a5       	ldd	r23, Y+40	; 0x28
    24ba:	89 a5       	ldd	r24, Y+41	; 0x29
    24bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	4a e7       	ldi	r20, 0x7A	; 122
    24c4:	53 e4       	ldi	r21, 0x43	; 67
    24c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	8b a3       	std	Y+35, r24	; 0x23
    24d0:	9c a3       	std	Y+36, r25	; 0x24
    24d2:	ad a3       	std	Y+37, r26	; 0x25
    24d4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24d6:	6b a1       	ldd	r22, Y+35	; 0x23
    24d8:	7c a1       	ldd	r23, Y+36	; 0x24
    24da:	8d a1       	ldd	r24, Y+37	; 0x25
    24dc:	9e a1       	ldd	r25, Y+38	; 0x26
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	40 e8       	ldi	r20, 0x80	; 128
    24e4:	5f e3       	ldi	r21, 0x3F	; 63
    24e6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    24ea:	88 23       	and	r24, r24
    24ec:	2c f4       	brge	.+10     	; 0x24f8 <LCD_displayChar+0x160>
		__ticks = 1;
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	9a a3       	std	Y+34, r25	; 0x22
    24f4:	89 a3       	std	Y+33, r24	; 0x21
    24f6:	3f c0       	rjmp	.+126    	; 0x2576 <LCD_displayChar+0x1de>
	else if (__tmp > 65535)
    24f8:	6b a1       	ldd	r22, Y+35	; 0x23
    24fa:	7c a1       	ldd	r23, Y+36	; 0x24
    24fc:	8d a1       	ldd	r24, Y+37	; 0x25
    24fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	3f ef       	ldi	r19, 0xFF	; 255
    2504:	4f e7       	ldi	r20, 0x7F	; 127
    2506:	57 e4       	ldi	r21, 0x47	; 71
    2508:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    250c:	18 16       	cp	r1, r24
    250e:	4c f5       	brge	.+82     	; 0x2562 <LCD_displayChar+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2510:	6f a1       	ldd	r22, Y+39	; 0x27
    2512:	78 a5       	ldd	r23, Y+40	; 0x28
    2514:	89 a5       	ldd	r24, Y+41	; 0x29
    2516:	9a a5       	ldd	r25, Y+42	; 0x2a
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	40 e2       	ldi	r20, 0x20	; 32
    251e:	51 e4       	ldi	r21, 0x41	; 65
    2520:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	bc 01       	movw	r22, r24
    252a:	cd 01       	movw	r24, r26
    252c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	9a a3       	std	Y+34, r25	; 0x22
    2536:	89 a3       	std	Y+33, r24	; 0x21
    2538:	0f c0       	rjmp	.+30     	; 0x2558 <LCD_displayChar+0x1c0>
    253a:	89 e1       	ldi	r24, 0x19	; 25
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	98 a3       	std	Y+32, r25	; 0x20
    2540:	8f 8f       	std	Y+31, r24	; 0x1f
    2542:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2544:	98 a1       	ldd	r25, Y+32	; 0x20
    2546:	01 97       	sbiw	r24, 0x01	; 1
    2548:	f1 f7       	brne	.-4      	; 0x2546 <LCD_displayChar+0x1ae>
    254a:	98 a3       	std	Y+32, r25	; 0x20
    254c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    254e:	89 a1       	ldd	r24, Y+33	; 0x21
    2550:	9a a1       	ldd	r25, Y+34	; 0x22
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	9a a3       	std	Y+34, r25	; 0x22
    2556:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2558:	89 a1       	ldd	r24, Y+33	; 0x21
    255a:	9a a1       	ldd	r25, Y+34	; 0x22
    255c:	00 97       	sbiw	r24, 0x00	; 0
    255e:	69 f7       	brne	.-38     	; 0x253a <LCD_displayChar+0x1a2>
    2560:	14 c0       	rjmp	.+40     	; 0x258a <LCD_displayChar+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2562:	6b a1       	ldd	r22, Y+35	; 0x23
    2564:	7c a1       	ldd	r23, Y+36	; 0x24
    2566:	8d a1       	ldd	r24, Y+37	; 0x25
    2568:	9e a1       	ldd	r25, Y+38	; 0x26
    256a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	9a a3       	std	Y+34, r25	; 0x22
    2574:	89 a3       	std	Y+33, r24	; 0x21
    2576:	89 a1       	ldd	r24, Y+33	; 0x21
    2578:	9a a1       	ldd	r25, Y+34	; 0x22
    257a:	9e 8f       	std	Y+30, r25	; 0x1e
    257c:	8d 8f       	std	Y+29, r24	; 0x1d
    257e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2580:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	f1 f7       	brne	.-4      	; 0x2582 <LCD_displayChar+0x1ea>
    2586:	9e 8f       	std	Y+30, r25	; 0x1e
    2588:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_write_high_nibble(LCD_data_port,HIGH_NIBBLE_OF(data));
    258a:	89 ad       	ldd	r24, Y+57	; 0x39
    258c:	98 2f       	mov	r25, r24
    258e:	92 95       	swap	r25
    2590:	9f 70       	andi	r25, 0x0F	; 15
    2592:	84 e4       	ldi	r24, 0x44	; 68
    2594:	69 2f       	mov	r22, r25
    2596:	0e 94 56 0c 	call	0x18ac	; 0x18ac <DIO_write_high_nibble>
	LCD_refresh();
    259a:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <LCD_refresh>
	DIO_write_high_nibble(LCD_data_port,data);
    259e:	84 e4       	ldi	r24, 0x44	; 68
    25a0:	69 ad       	ldd	r22, Y+57	; 0x39
    25a2:	0e 94 56 0c 	call	0x18ac	; 0x18ac <DIO_write_high_nibble>
    25a6:	80 e0       	ldi	r24, 0x00	; 0
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	a0 e8       	ldi	r26, 0x80	; 128
    25ac:	bf e3       	ldi	r27, 0x3F	; 63
    25ae:	89 8f       	std	Y+25, r24	; 0x19
    25b0:	9a 8f       	std	Y+26, r25	; 0x1a
    25b2:	ab 8f       	std	Y+27, r26	; 0x1b
    25b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25b6:	69 8d       	ldd	r22, Y+25	; 0x19
    25b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	4a e7       	ldi	r20, 0x7A	; 122
    25c4:	53 e4       	ldi	r21, 0x43	; 67
    25c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	8d 8b       	std	Y+21, r24	; 0x15
    25d0:	9e 8b       	std	Y+22, r25	; 0x16
    25d2:	af 8b       	std	Y+23, r26	; 0x17
    25d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25d6:	6d 89       	ldd	r22, Y+21	; 0x15
    25d8:	7e 89       	ldd	r23, Y+22	; 0x16
    25da:	8f 89       	ldd	r24, Y+23	; 0x17
    25dc:	98 8d       	ldd	r25, Y+24	; 0x18
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	40 e8       	ldi	r20, 0x80	; 128
    25e4:	5f e3       	ldi	r21, 0x3F	; 63
    25e6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    25ea:	88 23       	and	r24, r24
    25ec:	2c f4       	brge	.+10     	; 0x25f8 <LCD_displayChar+0x260>
		__ticks = 1;
    25ee:	81 e0       	ldi	r24, 0x01	; 1
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	9c 8b       	std	Y+20, r25	; 0x14
    25f4:	8b 8b       	std	Y+19, r24	; 0x13
    25f6:	3f c0       	rjmp	.+126    	; 0x2676 <LCD_displayChar+0x2de>
	else if (__tmp > 65535)
    25f8:	6d 89       	ldd	r22, Y+21	; 0x15
    25fa:	7e 89       	ldd	r23, Y+22	; 0x16
    25fc:	8f 89       	ldd	r24, Y+23	; 0x17
    25fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	3f ef       	ldi	r19, 0xFF	; 255
    2604:	4f e7       	ldi	r20, 0x7F	; 127
    2606:	57 e4       	ldi	r21, 0x47	; 71
    2608:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    260c:	18 16       	cp	r1, r24
    260e:	4c f5       	brge	.+82     	; 0x2662 <LCD_displayChar+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2610:	69 8d       	ldd	r22, Y+25	; 0x19
    2612:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2614:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2616:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	40 e2       	ldi	r20, 0x20	; 32
    261e:	51 e4       	ldi	r21, 0x41	; 65
    2620:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	bc 01       	movw	r22, r24
    262a:	cd 01       	movw	r24, r26
    262c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2630:	dc 01       	movw	r26, r24
    2632:	cb 01       	movw	r24, r22
    2634:	9c 8b       	std	Y+20, r25	; 0x14
    2636:	8b 8b       	std	Y+19, r24	; 0x13
    2638:	0f c0       	rjmp	.+30     	; 0x2658 <LCD_displayChar+0x2c0>
    263a:	89 e1       	ldi	r24, 0x19	; 25
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	9a 8b       	std	Y+18, r25	; 0x12
    2640:	89 8b       	std	Y+17, r24	; 0x11
    2642:	89 89       	ldd	r24, Y+17	; 0x11
    2644:	9a 89       	ldd	r25, Y+18	; 0x12
    2646:	01 97       	sbiw	r24, 0x01	; 1
    2648:	f1 f7       	brne	.-4      	; 0x2646 <LCD_displayChar+0x2ae>
    264a:	9a 8b       	std	Y+18, r25	; 0x12
    264c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    264e:	8b 89       	ldd	r24, Y+19	; 0x13
    2650:	9c 89       	ldd	r25, Y+20	; 0x14
    2652:	01 97       	sbiw	r24, 0x01	; 1
    2654:	9c 8b       	std	Y+20, r25	; 0x14
    2656:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2658:	8b 89       	ldd	r24, Y+19	; 0x13
    265a:	9c 89       	ldd	r25, Y+20	; 0x14
    265c:	00 97       	sbiw	r24, 0x00	; 0
    265e:	69 f7       	brne	.-38     	; 0x263a <LCD_displayChar+0x2a2>
    2660:	14 c0       	rjmp	.+40     	; 0x268a <LCD_displayChar+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2662:	6d 89       	ldd	r22, Y+21	; 0x15
    2664:	7e 89       	ldd	r23, Y+22	; 0x16
    2666:	8f 89       	ldd	r24, Y+23	; 0x17
    2668:	98 8d       	ldd	r25, Y+24	; 0x18
    266a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    266e:	dc 01       	movw	r26, r24
    2670:	cb 01       	movw	r24, r22
    2672:	9c 8b       	std	Y+20, r25	; 0x14
    2674:	8b 8b       	std	Y+19, r24	; 0x13
    2676:	8b 89       	ldd	r24, Y+19	; 0x13
    2678:	9c 89       	ldd	r25, Y+20	; 0x14
    267a:	98 8b       	std	Y+16, r25	; 0x10
    267c:	8f 87       	std	Y+15, r24	; 0x0f
    267e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2680:	98 89       	ldd	r25, Y+16	; 0x10
    2682:	01 97       	sbiw	r24, 0x01	; 1
    2684:	f1 f7       	brne	.-4      	; 0x2682 <LCD_displayChar+0x2ea>
    2686:	98 8b       	std	Y+16, r25	; 0x10
    2688:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,0);
    268a:	83 e4       	ldi	r24, 0x43	; 67
    268c:	62 e0       	ldi	r22, 0x02	; 2
    268e:	40 e0       	ldi	r20, 0x00	; 0
    2690:	0e 94 12 07 	call	0xe24	; 0xe24 <DIO_write_PIN>
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	a0 e8       	ldi	r26, 0x80	; 128
    269a:	bf e3       	ldi	r27, 0x3F	; 63
    269c:	8b 87       	std	Y+11, r24	; 0x0b
    269e:	9c 87       	std	Y+12, r25	; 0x0c
    26a0:	ad 87       	std	Y+13, r26	; 0x0d
    26a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	4a e7       	ldi	r20, 0x7A	; 122
    26b2:	53 e4       	ldi	r21, 0x43	; 67
    26b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	8f 83       	std	Y+7, r24	; 0x07
    26be:	98 87       	std	Y+8, r25	; 0x08
    26c0:	a9 87       	std	Y+9, r26	; 0x09
    26c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26c4:	6f 81       	ldd	r22, Y+7	; 0x07
    26c6:	78 85       	ldd	r23, Y+8	; 0x08
    26c8:	89 85       	ldd	r24, Y+9	; 0x09
    26ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	40 e8       	ldi	r20, 0x80	; 128
    26d2:	5f e3       	ldi	r21, 0x3F	; 63
    26d4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    26d8:	88 23       	and	r24, r24
    26da:	2c f4       	brge	.+10     	; 0x26e6 <LCD_displayChar+0x34e>
		__ticks = 1;
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	9e 83       	std	Y+6, r25	; 0x06
    26e2:	8d 83       	std	Y+5, r24	; 0x05
    26e4:	3f c0       	rjmp	.+126    	; 0x2764 <LCD_displayChar+0x3cc>
	else if (__tmp > 65535)
    26e6:	6f 81       	ldd	r22, Y+7	; 0x07
    26e8:	78 85       	ldd	r23, Y+8	; 0x08
    26ea:	89 85       	ldd	r24, Y+9	; 0x09
    26ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	3f ef       	ldi	r19, 0xFF	; 255
    26f2:	4f e7       	ldi	r20, 0x7F	; 127
    26f4:	57 e4       	ldi	r21, 0x47	; 71
    26f6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    26fa:	18 16       	cp	r1, r24
    26fc:	4c f5       	brge	.+82     	; 0x2750 <LCD_displayChar+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2700:	7c 85       	ldd	r23, Y+12	; 0x0c
    2702:	8d 85       	ldd	r24, Y+13	; 0x0d
    2704:	9e 85       	ldd	r25, Y+14	; 0x0e
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	40 e2       	ldi	r20, 0x20	; 32
    270c:	51 e4       	ldi	r21, 0x41	; 65
    270e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2712:	dc 01       	movw	r26, r24
    2714:	cb 01       	movw	r24, r22
    2716:	bc 01       	movw	r22, r24
    2718:	cd 01       	movw	r24, r26
    271a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    271e:	dc 01       	movw	r26, r24
    2720:	cb 01       	movw	r24, r22
    2722:	9e 83       	std	Y+6, r25	; 0x06
    2724:	8d 83       	std	Y+5, r24	; 0x05
    2726:	0f c0       	rjmp	.+30     	; 0x2746 <LCD_displayChar+0x3ae>
    2728:	89 e1       	ldi	r24, 0x19	; 25
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	9c 83       	std	Y+4, r25	; 0x04
    272e:	8b 83       	std	Y+3, r24	; 0x03
    2730:	8b 81       	ldd	r24, Y+3	; 0x03
    2732:	9c 81       	ldd	r25, Y+4	; 0x04
    2734:	01 97       	sbiw	r24, 0x01	; 1
    2736:	f1 f7       	brne	.-4      	; 0x2734 <LCD_displayChar+0x39c>
    2738:	9c 83       	std	Y+4, r25	; 0x04
    273a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    273c:	8d 81       	ldd	r24, Y+5	; 0x05
    273e:	9e 81       	ldd	r25, Y+6	; 0x06
    2740:	01 97       	sbiw	r24, 0x01	; 1
    2742:	9e 83       	std	Y+6, r25	; 0x06
    2744:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2746:	8d 81       	ldd	r24, Y+5	; 0x05
    2748:	9e 81       	ldd	r25, Y+6	; 0x06
    274a:	00 97       	sbiw	r24, 0x00	; 0
    274c:	69 f7       	brne	.-38     	; 0x2728 <LCD_displayChar+0x390>
    274e:	14 c0       	rjmp	.+40     	; 0x2778 <LCD_displayChar+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2750:	6f 81       	ldd	r22, Y+7	; 0x07
    2752:	78 85       	ldd	r23, Y+8	; 0x08
    2754:	89 85       	ldd	r24, Y+9	; 0x09
    2756:	9a 85       	ldd	r25, Y+10	; 0x0a
    2758:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    275c:	dc 01       	movw	r26, r24
    275e:	cb 01       	movw	r24, r22
    2760:	9e 83       	std	Y+6, r25	; 0x06
    2762:	8d 83       	std	Y+5, r24	; 0x05
    2764:	8d 81       	ldd	r24, Y+5	; 0x05
    2766:	9e 81       	ldd	r25, Y+6	; 0x06
    2768:	9a 83       	std	Y+2, r25	; 0x02
    276a:	89 83       	std	Y+1, r24	; 0x01
    276c:	89 81       	ldd	r24, Y+1	; 0x01
    276e:	9a 81       	ldd	r25, Y+2	; 0x02
    2770:	01 97       	sbiw	r24, 0x01	; 1
    2772:	f1 f7       	brne	.-4      	; 0x2770 <LCD_displayChar+0x3d8>
    2774:	9a 83       	std	Y+2, r25	; 0x02
    2776:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2778:	e9 96       	adiw	r28, 0x39	; 57
    277a:	0f b6       	in	r0, 0x3f	; 63
    277c:	f8 94       	cli
    277e:	de bf       	out	0x3e, r29	; 62
    2780:	0f be       	out	0x3f, r0	; 63
    2782:	cd bf       	out	0x3d, r28	; 61
    2784:	cf 91       	pop	r28
    2786:	df 91       	pop	r29
    2788:	08 95       	ret

0000278a <LCD_displayString>:


void LCD_displayString(const char *str)
{
    278a:	df 93       	push	r29
    278c:	cf 93       	push	r28
    278e:	00 d0       	rcall	.+0      	; 0x2790 <LCD_displayString+0x6>
    2790:	0f 92       	push	r0
    2792:	cd b7       	in	r28, 0x3d	; 61
    2794:	de b7       	in	r29, 0x3e	; 62
    2796:	9b 83       	std	Y+3, r25	; 0x03
    2798:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    279a:	19 82       	std	Y+1, r1	; 0x01
    279c:	0e c0       	rjmp	.+28     	; 0x27ba <LCD_displayString+0x30>
	while(str[i]!='\0')
	{
		LCD_displayChar(str[i]);
    279e:	89 81       	ldd	r24, Y+1	; 0x01
    27a0:	28 2f       	mov	r18, r24
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	8a 81       	ldd	r24, Y+2	; 0x02
    27a6:	9b 81       	ldd	r25, Y+3	; 0x03
    27a8:	fc 01       	movw	r30, r24
    27aa:	e2 0f       	add	r30, r18
    27ac:	f3 1f       	adc	r31, r19
    27ae:	80 81       	ld	r24, Z
    27b0:	0e 94 cc 11 	call	0x2398	; 0x2398 <LCD_displayChar>
		i++;
    27b4:	89 81       	ldd	r24, Y+1	; 0x01
    27b6:	8f 5f       	subi	r24, 0xFF	; 255
    27b8:	89 83       	std	Y+1, r24	; 0x01


void LCD_displayString(const char *str)
{
	uint8 i=0;
	while(str[i]!='\0')
    27ba:	89 81       	ldd	r24, Y+1	; 0x01
    27bc:	28 2f       	mov	r18, r24
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	8a 81       	ldd	r24, Y+2	; 0x02
    27c2:	9b 81       	ldd	r25, Y+3	; 0x03
    27c4:	fc 01       	movw	r30, r24
    27c6:	e2 0f       	add	r30, r18
    27c8:	f3 1f       	adc	r31, r19
    27ca:	80 81       	ld	r24, Z
    27cc:	88 23       	and	r24, r24
    27ce:	39 f7       	brne	.-50     	; 0x279e <LCD_displayString+0x14>
	{
		LCD_displayChar(str[i]);
		i++;
	}

}
    27d0:	0f 90       	pop	r0
    27d2:	0f 90       	pop	r0
    27d4:	0f 90       	pop	r0
    27d6:	cf 91       	pop	r28
    27d8:	df 91       	pop	r29
    27da:	08 95       	ret

000027dc <LCD_MoveTo_Row_Column>:


void LCD_MoveTo_Row_Column(uint8 row, uint8 col)
{
    27dc:	df 93       	push	r29
    27de:	cf 93       	push	r28
    27e0:	00 d0       	rcall	.+0      	; 0x27e2 <LCD_MoveTo_Row_Column+0x6>
    27e2:	00 d0       	rcall	.+0      	; 0x27e4 <LCD_MoveTo_Row_Column+0x8>
    27e4:	0f 92       	push	r0
    27e6:	cd b7       	in	r28, 0x3d	; 61
    27e8:	de b7       	in	r29, 0x3e	; 62
    27ea:	8a 83       	std	Y+2, r24	; 0x02
    27ec:	6b 83       	std	Y+3, r22	; 0x03
	// The position is COL+ROW
	uint8 position;

	switch(row)
    27ee:	8a 81       	ldd	r24, Y+2	; 0x02
    27f0:	28 2f       	mov	r18, r24
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	3d 83       	std	Y+5, r19	; 0x05
    27f6:	2c 83       	std	Y+4, r18	; 0x04
    27f8:	8c 81       	ldd	r24, Y+4	; 0x04
    27fa:	9d 81       	ldd	r25, Y+5	; 0x05
    27fc:	00 97       	sbiw	r24, 0x00	; 0
    27fe:	31 f0       	breq	.+12     	; 0x280c <LCD_MoveTo_Row_Column+0x30>
    2800:	2c 81       	ldd	r18, Y+4	; 0x04
    2802:	3d 81       	ldd	r19, Y+5	; 0x05
    2804:	21 30       	cpi	r18, 0x01	; 1
    2806:	31 05       	cpc	r19, r1
    2808:	21 f0       	breq	.+8      	; 0x2812 <LCD_MoveTo_Row_Column+0x36>
    280a:	06 c0       	rjmp	.+12     	; 0x2818 <LCD_MoveTo_Row_Column+0x3c>
	{
		case 0:
			position=col;
    280c:	8b 81       	ldd	r24, Y+3	; 0x03
    280e:	89 83       	std	Y+1, r24	; 0x01
    2810:	03 c0       	rjmp	.+6      	; 0x2818 <LCD_MoveTo_Row_Column+0x3c>
			break;
		case 1:
			position=col+0x40;
    2812:	8b 81       	ldd	r24, Y+3	; 0x03
    2814:	80 5c       	subi	r24, 0xC0	; 192
    2816:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	LCD_Command(position|LCD_Cursor_move_to);
    2818:	89 81       	ldd	r24, Y+1	; 0x01
    281a:	80 68       	ori	r24, 0x80	; 128
    281c:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <LCD_Command>
}
    2820:	0f 90       	pop	r0
    2822:	0f 90       	pop	r0
    2824:	0f 90       	pop	r0
    2826:	0f 90       	pop	r0
    2828:	0f 90       	pop	r0
    282a:	cf 91       	pop	r28
    282c:	df 91       	pop	r29
    282e:	08 95       	ret

00002830 <LCD_display_String_Row_Column>:


void LCD_display_String_Row_Column(uint8 row,uint8 col, const char *str)
{
    2830:	df 93       	push	r29
    2832:	cf 93       	push	r28
    2834:	00 d0       	rcall	.+0      	; 0x2836 <LCD_display_String_Row_Column+0x6>
    2836:	00 d0       	rcall	.+0      	; 0x2838 <LCD_display_String_Row_Column+0x8>
    2838:	cd b7       	in	r28, 0x3d	; 61
    283a:	de b7       	in	r29, 0x3e	; 62
    283c:	89 83       	std	Y+1, r24	; 0x01
    283e:	6a 83       	std	Y+2, r22	; 0x02
    2840:	5c 83       	std	Y+4, r21	; 0x04
    2842:	4b 83       	std	Y+3, r20	; 0x03
	LCD_MoveTo_Row_Column(row,col);
    2844:	89 81       	ldd	r24, Y+1	; 0x01
    2846:	6a 81       	ldd	r22, Y+2	; 0x02
    2848:	0e 94 ee 13 	call	0x27dc	; 0x27dc <LCD_MoveTo_Row_Column>
	LCD_displayString(str);
    284c:	8b 81       	ldd	r24, Y+3	; 0x03
    284e:	9c 81       	ldd	r25, Y+4	; 0x04
    2850:	0e 94 c5 13 	call	0x278a	; 0x278a <LCD_displayString>

}
    2854:	0f 90       	pop	r0
    2856:	0f 90       	pop	r0
    2858:	0f 90       	pop	r0
    285a:	0f 90       	pop	r0
    285c:	cf 91       	pop	r28
    285e:	df 91       	pop	r29
    2860:	08 95       	ret

00002862 <LCD_Clear>:



void LCD_Clear(void)
{
    2862:	df 93       	push	r29
    2864:	cf 93       	push	r28
    2866:	cd b7       	in	r28, 0x3d	; 61
    2868:	de b7       	in	r29, 0x3e	; 62
	LCD_Command(LCD_clear_cmd);
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <LCD_Command>
}
    2870:	cf 91       	pop	r28
    2872:	df 91       	pop	r29
    2874:	08 95       	ret

00002876 <LCD_integerToString>:



void LCD_integerToString(uint8 data)
{
    2876:	df 93       	push	r29
    2878:	cf 93       	push	r28
    287a:	cd b7       	in	r28, 0x3d	; 61
    287c:	de b7       	in	r29, 0x3e	; 62
    287e:	61 97       	sbiw	r28, 0x11	; 17
    2880:	0f b6       	in	r0, 0x3f	; 63
    2882:	f8 94       	cli
    2884:	de bf       	out	0x3e, r29	; 62
    2886:	0f be       	out	0x3f, r0	; 63
    2888:	cd bf       	out	0x3d, r28	; 61
    288a:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];
	itoa(data,buff,10);
    288c:	89 89       	ldd	r24, Y+17	; 0x11
    288e:	88 2f       	mov	r24, r24
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	9e 01       	movw	r18, r28
    2894:	2f 5f       	subi	r18, 0xFF	; 255
    2896:	3f 4f       	sbci	r19, 0xFF	; 255
    2898:	b9 01       	movw	r22, r18
    289a:	4a e0       	ldi	r20, 0x0A	; 10
    289c:	50 e0       	ldi	r21, 0x00	; 0
    289e:	0e 94 95 14 	call	0x292a	; 0x292a <itoa>
	LCD_displayString( buff );
    28a2:	ce 01       	movw	r24, r28
    28a4:	01 96       	adiw	r24, 0x01	; 1
    28a6:	0e 94 c5 13 	call	0x278a	; 0x278a <LCD_displayString>
}
    28aa:	61 96       	adiw	r28, 0x11	; 17
    28ac:	0f b6       	in	r0, 0x3f	; 63
    28ae:	f8 94       	cli
    28b0:	de bf       	out	0x3e, r29	; 62
    28b2:	0f be       	out	0x3f, r0	; 63
    28b4:	cd bf       	out	0x3d, r28	; 61
    28b6:	cf 91       	pop	r28
    28b8:	df 91       	pop	r29
    28ba:	08 95       	ret

000028bc <__prologue_saves__>:
    28bc:	2f 92       	push	r2
    28be:	3f 92       	push	r3
    28c0:	4f 92       	push	r4
    28c2:	5f 92       	push	r5
    28c4:	6f 92       	push	r6
    28c6:	7f 92       	push	r7
    28c8:	8f 92       	push	r8
    28ca:	9f 92       	push	r9
    28cc:	af 92       	push	r10
    28ce:	bf 92       	push	r11
    28d0:	cf 92       	push	r12
    28d2:	df 92       	push	r13
    28d4:	ef 92       	push	r14
    28d6:	ff 92       	push	r15
    28d8:	0f 93       	push	r16
    28da:	1f 93       	push	r17
    28dc:	cf 93       	push	r28
    28de:	df 93       	push	r29
    28e0:	cd b7       	in	r28, 0x3d	; 61
    28e2:	de b7       	in	r29, 0x3e	; 62
    28e4:	ca 1b       	sub	r28, r26
    28e6:	db 0b       	sbc	r29, r27
    28e8:	0f b6       	in	r0, 0x3f	; 63
    28ea:	f8 94       	cli
    28ec:	de bf       	out	0x3e, r29	; 62
    28ee:	0f be       	out	0x3f, r0	; 63
    28f0:	cd bf       	out	0x3d, r28	; 61
    28f2:	09 94       	ijmp

000028f4 <__epilogue_restores__>:
    28f4:	2a 88       	ldd	r2, Y+18	; 0x12
    28f6:	39 88       	ldd	r3, Y+17	; 0x11
    28f8:	48 88       	ldd	r4, Y+16	; 0x10
    28fa:	5f 84       	ldd	r5, Y+15	; 0x0f
    28fc:	6e 84       	ldd	r6, Y+14	; 0x0e
    28fe:	7d 84       	ldd	r7, Y+13	; 0x0d
    2900:	8c 84       	ldd	r8, Y+12	; 0x0c
    2902:	9b 84       	ldd	r9, Y+11	; 0x0b
    2904:	aa 84       	ldd	r10, Y+10	; 0x0a
    2906:	b9 84       	ldd	r11, Y+9	; 0x09
    2908:	c8 84       	ldd	r12, Y+8	; 0x08
    290a:	df 80       	ldd	r13, Y+7	; 0x07
    290c:	ee 80       	ldd	r14, Y+6	; 0x06
    290e:	fd 80       	ldd	r15, Y+5	; 0x05
    2910:	0c 81       	ldd	r16, Y+4	; 0x04
    2912:	1b 81       	ldd	r17, Y+3	; 0x03
    2914:	aa 81       	ldd	r26, Y+2	; 0x02
    2916:	b9 81       	ldd	r27, Y+1	; 0x01
    2918:	ce 0f       	add	r28, r30
    291a:	d1 1d       	adc	r29, r1
    291c:	0f b6       	in	r0, 0x3f	; 63
    291e:	f8 94       	cli
    2920:	de bf       	out	0x3e, r29	; 62
    2922:	0f be       	out	0x3f, r0	; 63
    2924:	cd bf       	out	0x3d, r28	; 61
    2926:	ed 01       	movw	r28, r26
    2928:	08 95       	ret

0000292a <itoa>:
    292a:	fb 01       	movw	r30, r22
    292c:	9f 01       	movw	r18, r30
    292e:	e8 94       	clt
    2930:	42 30       	cpi	r20, 0x02	; 2
    2932:	c4 f0       	brlt	.+48     	; 0x2964 <itoa+0x3a>
    2934:	45 32       	cpi	r20, 0x25	; 37
    2936:	b4 f4       	brge	.+44     	; 0x2964 <itoa+0x3a>
    2938:	4a 30       	cpi	r20, 0x0A	; 10
    293a:	29 f4       	brne	.+10     	; 0x2946 <itoa+0x1c>
    293c:	97 fb       	bst	r25, 7
    293e:	1e f4       	brtc	.+6      	; 0x2946 <itoa+0x1c>
    2940:	90 95       	com	r25
    2942:	81 95       	neg	r24
    2944:	9f 4f       	sbci	r25, 0xFF	; 255
    2946:	64 2f       	mov	r22, r20
    2948:	77 27       	eor	r23, r23
    294a:	0e 94 c6 14 	call	0x298c	; 0x298c <__udivmodhi4>
    294e:	80 5d       	subi	r24, 0xD0	; 208
    2950:	8a 33       	cpi	r24, 0x3A	; 58
    2952:	0c f0       	brlt	.+2      	; 0x2956 <itoa+0x2c>
    2954:	89 5d       	subi	r24, 0xD9	; 217
    2956:	81 93       	st	Z+, r24
    2958:	cb 01       	movw	r24, r22
    295a:	00 97       	sbiw	r24, 0x00	; 0
    295c:	a1 f7       	brne	.-24     	; 0x2946 <itoa+0x1c>
    295e:	16 f4       	brtc	.+4      	; 0x2964 <itoa+0x3a>
    2960:	5d e2       	ldi	r21, 0x2D	; 45
    2962:	51 93       	st	Z+, r21
    2964:	10 82       	st	Z, r1
    2966:	c9 01       	movw	r24, r18
    2968:	0c 94 b6 14 	jmp	0x296c	; 0x296c <strrev>

0000296c <strrev>:
    296c:	dc 01       	movw	r26, r24
    296e:	fc 01       	movw	r30, r24
    2970:	67 2f       	mov	r22, r23
    2972:	71 91       	ld	r23, Z+
    2974:	77 23       	and	r23, r23
    2976:	e1 f7       	brne	.-8      	; 0x2970 <strrev+0x4>
    2978:	32 97       	sbiw	r30, 0x02	; 2
    297a:	04 c0       	rjmp	.+8      	; 0x2984 <strrev+0x18>
    297c:	7c 91       	ld	r23, X
    297e:	6d 93       	st	X+, r22
    2980:	70 83       	st	Z, r23
    2982:	62 91       	ld	r22, -Z
    2984:	ae 17       	cp	r26, r30
    2986:	bf 07       	cpc	r27, r31
    2988:	c8 f3       	brcs	.-14     	; 0x297c <strrev+0x10>
    298a:	08 95       	ret

0000298c <__udivmodhi4>:
    298c:	aa 1b       	sub	r26, r26
    298e:	bb 1b       	sub	r27, r27
    2990:	51 e1       	ldi	r21, 0x11	; 17
    2992:	07 c0       	rjmp	.+14     	; 0x29a2 <__udivmodhi4_ep>

00002994 <__udivmodhi4_loop>:
    2994:	aa 1f       	adc	r26, r26
    2996:	bb 1f       	adc	r27, r27
    2998:	a6 17       	cp	r26, r22
    299a:	b7 07       	cpc	r27, r23
    299c:	10 f0       	brcs	.+4      	; 0x29a2 <__udivmodhi4_ep>
    299e:	a6 1b       	sub	r26, r22
    29a0:	b7 0b       	sbc	r27, r23

000029a2 <__udivmodhi4_ep>:
    29a2:	88 1f       	adc	r24, r24
    29a4:	99 1f       	adc	r25, r25
    29a6:	5a 95       	dec	r21
    29a8:	a9 f7       	brne	.-22     	; 0x2994 <__udivmodhi4_loop>
    29aa:	80 95       	com	r24
    29ac:	90 95       	com	r25
    29ae:	bc 01       	movw	r22, r24
    29b0:	cd 01       	movw	r24, r26
    29b2:	08 95       	ret

000029b4 <_exit>:
    29b4:	f8 94       	cli

000029b6 <__stop_program>:
    29b6:	ff cf       	rjmp	.-2      	; 0x29b6 <__stop_program>
